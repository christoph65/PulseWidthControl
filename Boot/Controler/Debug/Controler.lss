
Controler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000e84  00000f18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  0080012e  0080012e  00000f46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001523  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c70  00000000  00000000  00002607  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b64  00000000  00000000  00003277  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000838  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000948  00000000  00000000  0000483c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 39       	cpi	r26, 0x99	; 153
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 01 	call	0x324	; 0x324 <main>
  9e:	0c 94 40 07 	jmp	0xe80	; 0xe80 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z4echov>:
PwGenerator pwGenerator;
StickReader stickReader;
MotorControler motorControler;
int iEvaluationCounter;

void echo() {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	1f 92       	push	r1
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	char readChar;
	serialInterface.Cyclic();
  b0:	80 e5       	ldi	r24, 0x50	; 80
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 2d 03 	call	0x65a	; 0x65a <_ZN15SerialInterface6CyclicEv>
	if (serialInterface.GetChar(&readChar)) {
  b8:	be 01       	movw	r22, r28
  ba:	6f 5f       	subi	r22, 0xFF	; 255
  bc:	7f 4f       	sbci	r23, 0xFF	; 255
  be:	80 e5       	ldi	r24, 0x50	; 80
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN15SerialInterface7GetCharEPc>
  c6:	88 23       	and	r24, r24
  c8:	69 f0       	breq	.+26     	; 0xe4 <_Z4echov+0x3e>
		if (readChar == '\r') serialInterface.SendChar('\n');
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	8d 30       	cpi	r24, 0x0D	; 13
  ce:	29 f4       	brne	.+10     	; 0xda <_Z4echov+0x34>
  d0:	6a e0       	ldi	r22, 0x0A	; 10
  d2:	80 e5       	ldi	r24, 0x50	; 80
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 ae 03 	call	0x75c	; 0x75c <_ZN15SerialInterface8SendCharEc>
		serialInterface.SendChar(readChar);
  da:	69 81       	ldd	r22, Y+1	; 0x01
  dc:	80 e5       	ldi	r24, 0x50	; 80
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	0e 94 ae 03 	call	0x75c	; 0x75c <_ZN15SerialInterface8SendCharEc>
	}
	serialInterface.Cyclic();
  e4:	80 e5       	ldi	r24, 0x50	; 80
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 2d 03 	call	0x65a	; 0x65a <_ZN15SerialInterface6CyclicEv>
}
  ec:	0f 90       	pop	r0
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <_Z15BlinkThreeTimesv>:


void BlinkThreeTimes()
{
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	// Wake up Signal über die LED (3 mal blinken)
	// Erster Test ob es denn wirklich flasht
	// Drive Servo to left and then to right
	DDRB |= 0x01;
 100:	20 9a       	sbi	0x04, 0	; 4
 102:	0f 2e       	mov	r0, r31
 104:	f3 e0       	ldi	r31, 0x03	; 3
 106:	ef 2e       	mov	r14, r31
 108:	f1 2c       	mov	r15, r1
 10a:	f0 2d       	mov	r31, r0
	int j,i,k;
	
	for (j=0;j<3;j++) {
		echo();
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z4echov>
 110:	0a e0       	ldi	r16, 0x0A	; 10
 112:	10 e0       	ldi	r17, 0x00	; 0
 114:	c0 ed       	ldi	r28, 0xD0	; 208
 116:	d7 e0       	ldi	r29, 0x07	; 7
		// pwGenerator.PwValues[0] = 127;
		for (k=0;k<10;k++) {
			for(i=0;i<2000;i++) {
				echo();			
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z4echov>
				PORTB |= 0x01;
 11c:	28 9a       	sbi	0x05, 0	; 5
 11e:	21 97       	sbiw	r28, 0x01	; 1
	
	for (j=0;j<3;j++) {
		echo();
		// pwGenerator.PwValues[0] = 127;
		for (k=0;k<10;k++) {
			for(i=0;i<2000;i++) {
 120:	d9 f7       	brne	.-10     	; 0x118 <_Z15BlinkThreeTimesv+0x24>
 122:	01 50       	subi	r16, 0x01	; 1
 124:	11 09       	sbc	r17, r1
	int j,i,k;
	
	for (j=0;j<3;j++) {
		echo();
		// pwGenerator.PwValues[0] = 127;
		for (k=0;k<10;k++) {
 126:	b1 f7       	brne	.-20     	; 0x114 <_Z15BlinkThreeTimesv+0x20>
 128:	0a e0       	ldi	r16, 0x0A	; 10
 12a:	10 e0       	ldi	r17, 0x00	; 0
 12c:	c0 ed       	ldi	r28, 0xD0	; 208
 12e:	d7 e0       	ldi	r29, 0x07	; 7
				PORTB |= 0x01;
			}
		}
		for (k=0;k<10;k++) {
			for(i=0;i<2000;i++) {
				echo();
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z4echov>
				PORTB &= 0xFE;
 134:	28 98       	cbi	0x05, 0	; 5
 136:	21 97       	sbiw	r28, 0x01	; 1
				echo();			
				PORTB |= 0x01;
			}
		}
		for (k=0;k<10;k++) {
			for(i=0;i<2000;i++) {
 138:	d9 f7       	brne	.-10     	; 0x130 <_Z15BlinkThreeTimesv+0x3c>
 13a:	01 50       	subi	r16, 0x01	; 1
 13c:	11 09       	sbc	r17, r1
			for(i=0;i<2000;i++) {
				echo();			
				PORTB |= 0x01;
			}
		}
		for (k=0;k<10;k++) {
 13e:	b1 f7       	brne	.-20     	; 0x12c <_Z15BlinkThreeTimesv+0x38>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	e8 1a       	sub	r14, r24
 144:	f1 08       	sbc	r15, r1
	// Erster Test ob es denn wirklich flasht
	// Drive Servo to left and then to right
	DDRB |= 0x01;
	int j,i,k;
	
	for (j=0;j<3;j++) {
 146:	11 f7       	brne	.-60     	; 0x10c <_Z15BlinkThreeTimesv+0x18>
 148:	0f 2e       	mov	r0, r31
 14a:	f3 e0       	ldi	r31, 0x03	; 3
 14c:	ef 2e       	mov	r14, r31
 14e:	f1 2c       	mov	r15, r1
 150:	f0 2d       	mov	r31, r0
				PORTB &= 0xFE;
			}
		}
	}
	for (j=0;j<3;j++) {
		echo();
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z4echov>
 156:	0a e0       	ldi	r16, 0x0A	; 10
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	c0 ed       	ldi	r28, 0xD0	; 208
 15c:	d7 e0       	ldi	r29, 0x07	; 7
		// pwGenerator.PwValues[0] = -127;
		for (k=0;k<10;k++) {
			for(i=0;i<2000;i++) {
				echo();
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z4echov>
				PORTB |= 0x01;
 162:	28 9a       	sbi	0x05, 0	; 5
 164:	21 97       	sbiw	r28, 0x01	; 1
	}
	for (j=0;j<3;j++) {
		echo();
		// pwGenerator.PwValues[0] = -127;
		for (k=0;k<10;k++) {
			for(i=0;i<2000;i++) {
 166:	d9 f7       	brne	.-10     	; 0x15e <_Z15BlinkThreeTimesv+0x6a>
 168:	01 50       	subi	r16, 0x01	; 1
 16a:	11 09       	sbc	r17, r1
		}
	}
	for (j=0;j<3;j++) {
		echo();
		// pwGenerator.PwValues[0] = -127;
		for (k=0;k<10;k++) {
 16c:	b1 f7       	brne	.-20     	; 0x15a <_Z15BlinkThreeTimesv+0x66>
 16e:	0a e0       	ldi	r16, 0x0A	; 10
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	c0 ed       	ldi	r28, 0xD0	; 208
 174:	d7 e0       	ldi	r29, 0x07	; 7
				PORTB |= 0x01;
			}
		}
		for (k=0;k<10;k++) {
			for(i=0;i<2000;i++) {
				echo();
 176:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z4echov>
				PORTB &= 0xFE;
 17a:	28 98       	cbi	0x05, 0	; 5
 17c:	21 97       	sbiw	r28, 0x01	; 1
				echo();
				PORTB |= 0x01;
			}
		}
		for (k=0;k<10;k++) {
			for(i=0;i<2000;i++) {
 17e:	d9 f7       	brne	.-10     	; 0x176 <_Z15BlinkThreeTimesv+0x82>
 180:	01 50       	subi	r16, 0x01	; 1
 182:	11 09       	sbc	r17, r1
			for(i=0;i<2000;i++) {
				echo();
				PORTB |= 0x01;
			}
		}
		for (k=0;k<10;k++) {
 184:	b1 f7       	brne	.-20     	; 0x172 <_Z15BlinkThreeTimesv+0x7e>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	e8 1a       	sub	r14, r24
 18a:	f1 08       	sbc	r15, r1
				echo();
				PORTB &= 0xFE;
			}
		}
	}
	for (j=0;j<3;j++) {
 18c:	11 f7       	brne	.-60     	; 0x152 <_Z15BlinkThreeTimesv+0x5e>
				PORTB &= 0xFE;
			}
		}
	}
	// pwGenerator.PwValues[0] = 0;
	PORTB &= 0xFE;
 18e:	28 98       	cbi	0x05, 0	; 5
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	08 95       	ret

0000019e <_ZN11Application6MyMainEv>:

class Application {

	public: void MyMain()
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	e2 97       	sbiw	r28, 0x32	; 50
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
	{
		sei(); // Interrupts enablen
 1b2:	78 94       	sei
 1b4:	ac e3       	ldi	r26, 0x3C	; 60
 1b6:	b1 e0       	ldi	r27, 0x01	; 1
 1b8:	e2 e4       	ldi	r30, 0x42	; 66
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	8e e4       	ldi	r24, 0x4E	; 78
 1be:	91 e0       	ldi	r25, 0x01	; 1
		
		// set inital values for the interface variables
		for (int i = 0; i<=5; i++) {
			pwGenerator.PwValues[i] = 0;
 1c0:	1d 92       	st	X+, r1
			pwGenerator.PwAdjustValues[i] = 0;
 1c2:	11 92       	st	Z+, r1
 1c4:	11 92       	st	Z+, r1
	public: void MyMain()
	{
		sei(); // Interrupts enablen
		
		// set inital values for the interface variables
		for (int i = 0; i<=5; i++) {
 1c6:	e8 17       	cp	r30, r24
 1c8:	f9 07       	cpc	r31, r25
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <_ZN11Application6MyMainEv+0x22>
			pwGenerator.PwValues[i] = 0;
			pwGenerator.PwAdjustValues[i] = 0;
		}
		// Initialize Port and Timers
		pwGenerator.Initialize();
 1cc:	8b e3       	ldi	r24, 0x3B	; 59
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <_ZN11PwGenerator10InitializeEv>
		motorControler.Initialize();
 1d4:	81 e3       	ldi	r24, 0x31	; 49
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN14MotorControler10InitializeEv>
		serialInterface.Initialize();
 1dc:	80 e5       	ldi	r24, 0x50	; 80
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN15SerialInterface10InitializeEv>
		stickReader.Initialize();
 1e4:	89 e3       	ldi	r24, 0x39	; 57
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN11StickReader10InitializeEv>
		iEvaluationCounter = 0;
 1ec:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <iEvaluationCounter+0x1>
 1f0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <iEvaluationCounter>

		// Say hello
		char strptr[50];
		sprintf (strptr, "Started ADC Controler\n\r");
 1f4:	88 e1       	ldi	r24, 0x18	; 24
 1f6:	e0 e0       	ldi	r30, 0x00	; 0
 1f8:	f1 e0       	ldi	r31, 0x01	; 1
 1fa:	de 01       	movw	r26, r28
 1fc:	11 96       	adiw	r26, 0x01	; 1
 1fe:	01 90       	ld	r0, Z+
 200:	0d 92       	st	X+, r0
 202:	8a 95       	dec	r24
 204:	e1 f7       	brne	.-8      	; 0x1fe <_ZN11Application6MyMainEv+0x60>
		serialInterface.SendString(strptr);
 206:	be 01       	movw	r22, r28
 208:	6f 5f       	subi	r22, 0xFF	; 255
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	80 e5       	ldi	r24, 0x50	; 80
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN15SerialInterface10SendStringEPc>

		BlinkThreeTimes();
 214:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z15BlinkThreeTimesv>
				iEvaluationCounter = 0;
				motorControler.Evaluate(stickReader.StickX,stickReader.StickY);
			}
			
			// positive Value always moves forward
			pwGenerator.PwValues[0] = motorControler.PwValueLeft;
 218:	0f 2e       	mov	r0, r31
 21a:	fb e3       	ldi	r31, 0x3B	; 59
 21c:	ef 2e       	mov	r14, r31
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	ff 2e       	mov	r15, r31
 222:	f0 2d       	mov	r31, r0
			pwGenerator.PwValues[1] = motorControler.PwValueRight;

			if (iReportingCounter == 1000) {
				iReportingCounter = 0;
				// sprintf (strptr, "ADC: X %d Y %d\n\r", stickReader.StickX, stickReader.StickY);
				sprintf (strptr, "PW: L %d R %d D %d\n\r", motorControler.PwValueLeft, motorControler.PwValueRight, motorControler.Direction);
 224:	0f 2e       	mov	r0, r31
 226:	f8 e1       	ldi	r31, 0x18	; 24
 228:	af 2e       	mov	r10, r31
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	bf 2e       	mov	r11, r31
 22e:	f0 2d       	mov	r31, r0
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	6c 01       	movw	r12, r24
	PORTB &= 0xFE;
}

class Application {

	public: void MyMain()
 236:	08 ee       	ldi	r16, 0xE8	; 232
 238:	13 e0       	ldi	r17, 0x03	; 3
		// Go to main Loop		
		int iReportingCounter;
		iReportingCounter = 0;
		while (true) {
			iReportingCounter += 1;	
			echo();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z4echov>
			stickReader.ReadADC();
 23e:	89 e3       	ldi	r24, 0x39	; 57
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 07 04 	call	0x80e	; 0x80e <_ZN11StickReader7ReadADCEv>
			if (iEvaluationCounter > 10) {
 246:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <iEvaluationCounter>
 24a:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <iEvaluationCounter+0x1>
 24e:	0b 97       	sbiw	r24, 0x0b	; 11
 250:	64 f0       	brlt	.+24     	; 0x26a <_ZN11Application6MyMainEv+0xcc>
				iEvaluationCounter = 0;
 252:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <iEvaluationCounter+0x1>
 256:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <iEvaluationCounter>
				motorControler.Evaluate(stickReader.StickX,stickReader.StickY);
 25a:	e9 e3       	ldi	r30, 0x39	; 57
 25c:	f1 e0       	ldi	r31, 0x01	; 1
 25e:	41 81       	ldd	r20, Z+1	; 0x01
 260:	60 81       	ld	r22, Z
 262:	81 e3       	ldi	r24, 0x31	; 49
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 97 01 	call	0x32e	; 0x32e <_ZN14MotorControler8EvaluateEaa>
			}
			
			// positive Value always moves forward
			pwGenerator.PwValues[0] = motorControler.PwValueLeft;
 26a:	e1 e3       	ldi	r30, 0x31	; 49
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	85 81       	ldd	r24, Z+5	; 0x05
 270:	d7 01       	movw	r26, r14
 272:	11 96       	adiw	r26, 0x01	; 1
 274:	8c 93       	st	X, r24
 276:	11 97       	sbiw	r26, 0x01	; 1
			pwGenerator.PwValues[1] = motorControler.PwValueRight;
 278:	94 81       	ldd	r25, Z+4	; 0x04
 27a:	12 96       	adiw	r26, 0x02	; 2
 27c:	9c 93       	st	X, r25
 27e:	01 50       	subi	r16, 0x01	; 1
 280:	11 09       	sbc	r17, r1

			if (iReportingCounter == 1000) {
 282:	d9 f6       	brne	.-74     	; 0x23a <_ZN11Application6MyMainEv+0x9c>
				iReportingCounter = 0;
				// sprintf (strptr, "ADC: X %d Y %d\n\r", stickReader.StickX, stickReader.StickY);
				sprintf (strptr, "PW: L %d R %d D %d\n\r", motorControler.PwValueLeft, motorControler.PwValueRight, motorControler.Direction);
 284:	27 81       	ldd	r18, Z+7	; 0x07
 286:	2f 93       	push	r18
 288:	26 81       	ldd	r18, Z+6	; 0x06
 28a:	2f 93       	push	r18
 28c:	29 2f       	mov	r18, r25
 28e:	09 2e       	mov	r0, r25
 290:	00 0c       	add	r0, r0
 292:	33 0b       	sbc	r19, r19
 294:	3f 93       	push	r19
 296:	9f 93       	push	r25
 298:	28 2f       	mov	r18, r24
 29a:	08 2e       	mov	r0, r24
 29c:	00 0c       	add	r0, r0
 29e:	33 0b       	sbc	r19, r19
 2a0:	3f 93       	push	r19
 2a2:	8f 93       	push	r24
 2a4:	bf 92       	push	r11
 2a6:	af 92       	push	r10
 2a8:	df 92       	push	r13
 2aa:	cf 92       	push	r12
 2ac:	0e 94 56 04 	call	0x8ac	; 0x8ac <sprintf>
				serialInterface.SendString(strptr);				
 2b0:	b6 01       	movw	r22, r12
 2b2:	80 e5       	ldi	r24, 0x50	; 80
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN15SerialInterface10SendStringEPc>
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	b8 cf       	rjmp	.-144    	; 0x236 <_ZN11Application6MyMainEv+0x98>

000002c6 <__vector_11>:
} app;

extern "C" {
	//-----------------------------------------------------------------
	ISR (TIMER1_COMPA_vect)          // Interrupt 0 vector
	{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
		pwGenerator.TimerInterrupt();
 2e8:	8b e3       	ldi	r24, 0x3B	; 59
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN11PwGenerator14TimerInterruptEv>
		//serialInterface.SendChar('i');
		iEvaluationCounter += 1;
 2f0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <iEvaluationCounter>
 2f4:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <iEvaluationCounter+0x1>
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <iEvaluationCounter+0x1>
 2fe:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <iEvaluationCounter>
	}
 302:	ff 91       	pop	r31
 304:	ef 91       	pop	r30
 306:	bf 91       	pop	r27
 308:	af 91       	pop	r26
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	7f 91       	pop	r23
 310:	6f 91       	pop	r22
 312:	5f 91       	pop	r21
 314:	4f 91       	pop	r20
 316:	3f 91       	pop	r19
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <main>:
}

int main(void)
{
	app.MyMain();
 324:	8e e2       	ldi	r24, 0x2E	; 46
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN11Application6MyMainEv>

0000032c <_ZN14MotorControler10InitializeEv>:
#define defDirRightBackward 7
#define defDirLeftBackward 8


void MotorControler::Initialize()
{
 32c:	08 95       	ret

0000032e <_ZN14MotorControler8EvaluateEaa>:
} //MotorControler

// default destructor
void MotorControler::Evaluate(int8_t stickX, int8_t stickY)
{
 32e:	fc 01       	movw	r30, r24
	
	// stickX and stickY should behave like in coordination system of X,Y Axis
	// Values should be from -127 to +128
	// First evaluating in which quarter we are.
	
	if (((stickX > -20) & (stickX < 20)) & ((stickY > -20) & (stickY < 20)) )
 330:	83 e1       	ldi	r24, 0x13	; 19
 332:	86 0f       	add	r24, r22
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	87 32       	cpi	r24, 0x27	; 39
 338:	08 f0       	brcs	.+2      	; 0x33c <_ZN14MotorControler8EvaluateEaa+0xe>
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	83 e1       	ldi	r24, 0x13	; 19
 340:	84 0f       	add	r24, r20
 342:	87 32       	cpi	r24, 0x27	; 39
 344:	08 f0       	brcs	.+2      	; 0x348 <_ZN14MotorControler8EvaluateEaa+0x1a>
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	99 23       	and	r25, r25
 34a:	29 f0       	breq	.+10     	; 0x356 <_ZN14MotorControler8EvaluateEaa+0x28>
 34c:	22 23       	and	r18, r18
 34e:	19 f0       	breq	.+6      	; 0x356 <_ZN14MotorControler8EvaluateEaa+0x28>
		Direction = defDirMiddle;
 350:	17 82       	std	Z+7, r1	; 0x07
 352:	16 82       	std	Z+6, r1	; 0x06
 354:	08 95       	ret
    else if ((stickX >= 20) & (stickY >= 20))
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	64 31       	cpi	r22, 0x14	; 20
 35a:	0c f4       	brge	.+2      	; 0x35e <_ZN14MotorControler8EvaluateEaa+0x30>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	31 e0       	ldi	r19, 0x01	; 1
 360:	44 31       	cpi	r20, 0x14	; 20
 362:	0c f4       	brge	.+2      	; 0x366 <_ZN14MotorControler8EvaluateEaa+0x38>
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	88 23       	and	r24, r24
 368:	59 f0       	breq	.+22     	; 0x380 <_ZN14MotorControler8EvaluateEaa+0x52>
 36a:	33 23       	and	r19, r19
 36c:	49 f0       	breq	.+18     	; 0x380 <_ZN14MotorControler8EvaluateEaa+0x52>
		Direction = defDirRightForward;
 36e:	85 e0       	ldi	r24, 0x05	; 5
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	97 83       	std	Z+7, r25	; 0x07
 374:	86 83       	std	Z+6, r24	; 0x06
			if ( PwValueRight < 122)
				PwValueRight += 1;
			break; 
		case defDirRightForward:
			// Only accelerating left Motor
			if ( PwValueLeft < 122)
 376:	85 81       	ldd	r24, Z+5	; 0x05
 378:	8a 37       	cpi	r24, 0x7A	; 122
 37a:	0c f4       	brge	.+2      	; 0x37e <_ZN14MotorControler8EvaluateEaa+0x50>
 37c:	a8 c0       	rjmp	.+336    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 37e:	08 95       	ret
	
	if (((stickX > -20) & (stickX < 20)) & ((stickY > -20) & (stickY < 20)) )
		Direction = defDirMiddle;
    else if ((stickX >= 20) & (stickY >= 20))
		Direction = defDirRightForward;
    else if ((stickX >= 20) & (stickY <= -20) )
 380:	51 e0       	ldi	r21, 0x01	; 1
 382:	4d 3e       	cpi	r20, 0xED	; 237
 384:	0c f0       	brlt	.+2      	; 0x388 <_ZN14MotorControler8EvaluateEaa+0x5a>
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	88 23       	and	r24, r24
 38a:	59 f0       	breq	.+22     	; 0x3a2 <_ZN14MotorControler8EvaluateEaa+0x74>
 38c:	55 23       	and	r21, r21
 38e:	49 f0       	breq	.+18     	; 0x3a2 <_ZN14MotorControler8EvaluateEaa+0x74>
	    Direction = defDirRightBackward;
 390:	87 e0       	ldi	r24, 0x07	; 7
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	97 83       	std	Z+7, r25	; 0x07
 396:	86 83       	std	Z+6, r24	; 0x06
			if ( PwValueRight > -121)
				PwValueRight -= 1;
			break;
		case defDirRightBackward:
			// Only reducing left Motor
			if ( PwValueLeft > -121)
 398:	85 81       	ldd	r24, Z+5	; 0x05
 39a:	88 38       	cpi	r24, 0x88	; 136
 39c:	0c f0       	brlt	.+2      	; 0x3a0 <_ZN14MotorControler8EvaluateEaa+0x72>
 39e:	9d c0       	rjmp	.+314    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 3a0:	08 95       	ret
		Direction = defDirMiddle;
    else if ((stickX >= 20) & (stickY >= 20))
		Direction = defDirRightForward;
    else if ((stickX >= 20) & (stickY <= -20) )
	    Direction = defDirRightBackward;
    else if ((stickX <= -20) & (stickY >= 20) )
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	6d 3e       	cpi	r22, 0xED	; 237
 3a6:	0c f0       	brlt	.+2      	; 0x3aa <_ZN14MotorControler8EvaluateEaa+0x7c>
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	33 23       	and	r19, r19
 3ac:	59 f0       	breq	.+22     	; 0x3c4 <_ZN14MotorControler8EvaluateEaa+0x96>
 3ae:	44 23       	and	r20, r20
 3b0:	49 f0       	breq	.+18     	; 0x3c4 <_ZN14MotorControler8EvaluateEaa+0x96>
		Direction = defDirLeftForward;
 3b2:	86 e0       	ldi	r24, 0x06	; 6
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	97 83       	std	Z+7, r25	; 0x07
 3b8:	86 83       	std	Z+6, r24	; 0x06
				PwValueLeft -= 1;
			}
			break;
		case defDirLeftForward:
			// Only accelerating right Motor
			if ( PwValueRight < 122)
 3ba:	84 81       	ldd	r24, Z+4	; 0x04
 3bc:	8a 37       	cpi	r24, 0x7A	; 122
 3be:	0c f4       	brge	.+2      	; 0x3c2 <_ZN14MotorControler8EvaluateEaa+0x94>
 3c0:	83 c0       	rjmp	.+262    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 3c2:	08 95       	ret
		Direction = defDirRightForward;
    else if ((stickX >= 20) & (stickY <= -20) )
	    Direction = defDirRightBackward;
    else if ((stickX <= -20) & (stickY >= 20) )
		Direction = defDirLeftForward;
    else if ((stickX <= -20) & (stickY <= -20) )
 3c4:	55 23       	and	r21, r21
 3c6:	59 f0       	breq	.+22     	; 0x3de <_ZN14MotorControler8EvaluateEaa+0xb0>
 3c8:	44 23       	and	r20, r20
 3ca:	49 f0       	breq	.+18     	; 0x3de <_ZN14MotorControler8EvaluateEaa+0xb0>
		Direction = defDirLeftBackward;
 3cc:	88 e0       	ldi	r24, 0x08	; 8
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	97 83       	std	Z+7, r25	; 0x07
 3d2:	86 83       	std	Z+6, r24	; 0x06
			if ( PwValueLeft < 122)
				PwValueLeft += 1;
			break;
		case defDirLeftBackward:
			// Only reducing right Motor
			if ( PwValueRight > -121)
 3d4:	84 81       	ldd	r24, Z+4	; 0x04
 3d6:	88 38       	cpi	r24, 0x88	; 136
 3d8:	0c f0       	brlt	.+2      	; 0x3dc <_ZN14MotorControler8EvaluateEaa+0xae>
 3da:	7c c0       	rjmp	.+248    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 3dc:	08 95       	ret
	    Direction = defDirRightBackward;
    else if ((stickX <= -20) & (stickY >= 20) )
		Direction = defDirLeftForward;
    else if ((stickX <= -20) & (stickY <= -20) )
		Direction = defDirLeftBackward;
    else if (((stickX > -20) & (stickX < 20)) & (stickY >= 20) )
 3de:	99 23       	and	r25, r25
 3e0:	b1 f0       	breq	.+44     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3e2:	33 23       	and	r19, r19
 3e4:	a1 f0       	breq	.+40     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	    Direction = defDirForward;
 3e6:	83 e0       	ldi	r24, 0x03	; 3
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	97 83       	std	Z+7, r25	; 0x07
 3ec:	86 83       	std	Z+6, r24	; 0x06
			// nichts machen
			break;
		case defDirForward: 
			// In the direction as it is accelarating
			// If one reaches limit, then don't extend
			if ((PwValueLeft >= 122) | (PwValueRight >= 122)) 
 3ee:	85 81       	ldd	r24, Z+5	; 0x05
 3f0:	94 81       	ldd	r25, Z+4	; 0x04
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	8a 37       	cpi	r24, 0x7A	; 122
 3f6:	0c f4       	brge	.+2      	; 0x3fa <_ZN14MotorControler8EvaluateEaa+0xcc>
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	21 11       	cpse	r18, r1
 3fc:	70 c0       	rjmp	.+224    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	9a 37       	cpi	r25, 0x7A	; 122
 402:	0c f4       	brge	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	22 23       	and	r18, r18
 408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	4a c0       	rjmp	.+148    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 40c:	08 95       	ret
		Direction = defDirLeftForward;
    else if ((stickX <= -20) & (stickY <= -20) )
		Direction = defDirLeftBackward;
    else if (((stickX > -20) & (stickX < 20)) & (stickY >= 20) )
	    Direction = defDirForward;
    else if (((stickX > -20) & (stickX < 20)) & (stickY <= -20) )
 40e:	99 23       	and	r25, r25
 410:	b1 f0       	breq	.+44     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 412:	55 23       	and	r21, r21
 414:	a1 f0       	breq	.+40     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		Direction = defDirBackward;
 416:	84 e0       	ldi	r24, 0x04	; 4
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	97 83       	std	Z+7, r25	; 0x07
 41c:	86 83       	std	Z+6, r24	; 0x06
				PwValueLeft += 1;
			}
			break;
		case defDirBackward:
			// both motor more reduced till one reaches end
			if ((PwValueRight <= -121) | (PwValueLeft <= -121))
 41e:	84 81       	ldd	r24, Z+4	; 0x04
 420:	95 81       	ldd	r25, Z+5	; 0x05
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	88 38       	cpi	r24, 0x88	; 136
 426:	0c f0       	brlt	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	21 11       	cpse	r18, r1
 42c:	58 c0       	rjmp	.+176    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	98 38       	cpi	r25, 0x88	; 136
 432:	0c f0       	brlt	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	22 23       	and	r18, r18
 438:	09 f4       	brne	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	41 c0       	rjmp	.+130    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 43c:	08 95       	ret
		Direction = defDirLeftBackward;
    else if (((stickX > -20) & (stickX < 20)) & (stickY >= 20) )
	    Direction = defDirForward;
    else if (((stickX > -20) & (stickX < 20)) & (stickY <= -20) )
		Direction = defDirBackward;
    else if ((stickX >= 20) & ((stickY > -20) & (stickY < 20)))
 43e:	22 23       	and	r18, r18
 440:	a9 f0       	breq	.+42     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 442:	88 23       	and	r24, r24
 444:	99 f0       	breq	.+38     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
        Direction = defDirRight;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	97 83       	std	Z+7, r25	; 0x07
 44c:	86 83       	std	Z+6, r24	; 0x06
				PwValueLeft -= 1;
			}
			break;
		case defDirRight:
			// left Motor more forward, right motor more reduced till one reaches end
			if ((PwValueRight <= -121) | (PwValueLeft >= 122))
 44e:	84 81       	ldd	r24, Z+4	; 0x04
 450:	95 81       	ldd	r25, Z+5	; 0x05
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	88 38       	cpi	r24, 0x88	; 136
 456:	0c f0       	brlt	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	21 11       	cpse	r18, r1
 45c:	40 c0       	rjmp	.+128    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	9a 37       	cpi	r25, 0x7A	; 122
 462:	0c f4       	brge	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	22 23       	and	r18, r18
 468:	29 f1       	breq	.+74     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 46a:	08 95       	ret
	    Direction = defDirForward;
    else if (((stickX > -20) & (stickX < 20)) & (stickY <= -20) )
		Direction = defDirBackward;
    else if ((stickX >= 20) & ((stickY > -20) & (stickY < 20)))
        Direction = defDirRight;
	else if ((stickX <= -20) & ((stickY > -20) & (stickY < 20)))
 46c:	22 23       	and	r18, r18
 46e:	a9 f0       	breq	.+42     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 470:	44 23       	and	r20, r20
 472:	99 f0       	breq	.+38     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		Direction = defDirLeft;
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	97 83       	std	Z+7, r25	; 0x07
 47a:	86 83       	std	Z+6, r24	; 0x06
				PwValueLeft += 1;
			}
			break;
		case defDirLeft: 
			// left Motor more forward, right motor more reduced till one reaches end
			if ((PwValueRight >= 122) | (PwValueLeft <= -121))
 47c:	84 81       	ldd	r24, Z+4	; 0x04
 47e:	95 81       	ldd	r25, Z+5	; 0x05
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	8a 37       	cpi	r24, 0x7A	; 122
 484:	0c f4       	brge	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	21 11       	cpse	r18, r1
 48a:	29 c0       	rjmp	.+82     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 48c:	21 e0       	ldi	r18, 0x01	; 1
 48e:	98 38       	cpi	r25, 0x88	; 136
 490:	0c f0       	brlt	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	22 23       	and	r18, r18
 496:	49 f0       	breq	.+18     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 498:	08 95       	ret
    else if ((stickX >= 20) & ((stickY > -20) & (stickY < 20)))
        Direction = defDirRight;
	else if ((stickX <= -20) & ((stickY > -20) & (stickY < 20)))
		Direction = defDirLeft;
	else 
		Direction = defDirMiddle;
 49a:	17 82       	std	Z+7, r1	; 0x07
 49c:	16 82       	std	Z+6, r1	; 0x06
 49e:	08 95       	ret
			// In the direction as it is accelarating
			// If one reaches limit, then don't extend
			if ((PwValueLeft >= 122) | (PwValueRight >= 122)) 
				break; // do nothing
			else {
				PwValueRight += 1;
 4a0:	9f 5f       	subi	r25, 0xFF	; 255
 4a2:	94 83       	std	Z+4, r25	; 0x04
				PwValueLeft += 1;
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	85 83       	std	Z+5, r24	; 0x05
			}
			break;
 4a8:	08 95       	ret
		case defDirLeft: 
			// left Motor more forward, right motor more reduced till one reaches end
			if ((PwValueRight >= 122) | (PwValueLeft <= -121))
				break; // do nothing
			else {
				PwValueRight += 1;
 4aa:	8f 5f       	subi	r24, 0xFF	; 255
 4ac:	84 83       	std	Z+4, r24	; 0x04
				PwValueLeft -= 1;
 4ae:	91 50       	subi	r25, 0x01	; 1
 4b0:	95 83       	std	Z+5, r25	; 0x05
			}
			break;
 4b2:	08 95       	ret
		case defDirRight:
			// left Motor more forward, right motor more reduced till one reaches end
			if ((PwValueRight <= -121) | (PwValueLeft >= 122))
				break; // do nothing
			else {
				PwValueRight -= 1;
 4b4:	81 50       	subi	r24, 0x01	; 1
 4b6:	84 83       	std	Z+4, r24	; 0x04
				PwValueLeft += 1;
 4b8:	9f 5f       	subi	r25, 0xFF	; 255
 4ba:	95 83       	std	Z+5, r25	; 0x05
			}
			break;
 4bc:	08 95       	ret
		case defDirBackward:
			// both motor more reduced till one reaches end
			if ((PwValueRight <= -121) | (PwValueLeft <= -121))
				break; // do nothing
			else {
				PwValueRight -= 1;
 4be:	81 50       	subi	r24, 0x01	; 1
 4c0:	84 83       	std	Z+4, r24	; 0x04
				PwValueLeft -= 1;
 4c2:	91 50       	subi	r25, 0x01	; 1
 4c4:	95 83       	std	Z+5, r25	; 0x05
			}
			break;
 4c6:	08 95       	ret
		case defDirLeftForward:
			// Only accelerating right Motor
			if ( PwValueRight < 122)
				PwValueRight += 1;
 4c8:	8f 5f       	subi	r24, 0xFF	; 255
 4ca:	84 83       	std	Z+4, r24	; 0x04
 4cc:	08 95       	ret
			break; 
		case defDirRightForward:
			// Only accelerating left Motor
			if ( PwValueLeft < 122)
				PwValueLeft += 1;
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	85 83       	std	Z+5, r24	; 0x05
 4d2:	08 95       	ret
			break;
		case defDirLeftBackward:
			// Only reducing right Motor
			if ( PwValueRight > -121)
				PwValueRight -= 1;
 4d4:	81 50       	subi	r24, 0x01	; 1
 4d6:	84 83       	std	Z+4, r24	; 0x04
 4d8:	08 95       	ret
			break;
		case defDirRightBackward:
			// Only reducing left Motor
			if ( PwValueLeft > -121)
				PwValueLeft -= 1;
 4da:	81 50       	subi	r24, 0x01	; 1
 4dc:	85 83       	std	Z+5, r24	; 0x05
 4de:	08 95       	ret

000004e0 <_ZN11PwGenerator10InitializeEv>:
//#define CHANNELMIDWIDTH 0xC2C // 1,56ms  (0x1000 is 2,05ms)
#define CHANNELSTEPWIDTH 8 // makes 0,51ms by 127 Steps 
#define CHANNELMIDWIDTH 0xB9B // 1,5ms

void PwGenerator::Initialize()
{
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	dc 01       	movw	r26, r24
	//// Running in CTC-Modus with Interrupt to Output Compare Register A

	// Set Timer Prescaler (same Values as PwReader)
	// 010 CS10 - CS12
	// Prescaler -> divide by 8 from internal Clock
	TCCR1B |= (1<<CS11); 
 4e6:	e1 e8       	ldi	r30, 0x81	; 129
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<CS12) | (1<<CS10));
 4f0:	80 81       	ld	r24, Z
 4f2:	8a 7f       	andi	r24, 0xFA	; 250
 4f4:	80 83       	st	Z, r24
	

	// CTC-Modus for Timer 1 - Clear Timer or Compare Match mode)
	// Using OCR1A for Matching
	TCCR1A &= ~((1<<WGM11) | (1<<WGM10));
 4f6:	c0 e8       	ldi	r28, 0x80	; 128
 4f8:	d0 e0       	ldi	r29, 0x00	; 0
 4fa:	88 81       	ld	r24, Y
 4fc:	8c 7f       	andi	r24, 0xFC	; 252
 4fe:	88 83       	st	Y, r24
	TCCR1B |= (1<<WGM12);
 500:	80 81       	ld	r24, Z
 502:	88 60       	ori	r24, 0x08	; 8
 504:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
 506:	80 81       	ld	r24, Z
 508:	8f 7e       	andi	r24, 0xEF	; 239
 50a:	80 83       	st	Z, r24

	// Using TIMER1_COMPA_vect for Interrupt
	// Setting TIMSK = Timer Interrupt Mask,
	//TIMSK |= (1 << OCIE1A); // Output Compare Interrupt Enable
	// ATMel328P: hier von TIMSK auf TIMSK1 geÃ¤ndert
	TIMSK1 = (1 << OCIE1A); // Output Compare Interrupt Enable
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	// COM1A1 ... Bits not to be changed, because output pins OC1A/OC1B are not used.

	// Enable the port 
	DDRC  |= 0x3F;  // prepare outputports bit 0 to bit 5
 512:	87 b1       	in	r24, 0x07	; 7
 514:	8f 63       	ori	r24, 0x3F	; 63
 516:	87 b9       	out	0x07, r24	; 7
	
	// Initialize the first channel
	channel = 0;
 518:	1c 92       	st	X, r1
	PORTC = 0x01;  	// Set bit 0 to 1
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	88 b9       	out	0x08, r24	; 8
	OCR1A = CHANNELMIDWIDTH + PwAdjustValues[channel] + (PwValues[channel] * CHANNELSTEPWIDTH); // set Timerwidth
 51e:	9c 91       	ld	r25, X
 520:	29 2f       	mov	r18, r25
 522:	99 0f       	add	r25, r25
 524:	33 0b       	sbc	r19, r19
 526:	f9 01       	movw	r30, r18
 528:	ee 0f       	add	r30, r30
 52a:	ff 1f       	adc	r31, r31
 52c:	ea 0f       	add	r30, r26
 52e:	fb 1f       	adc	r31, r27
 530:	47 81       	ldd	r20, Z+7	; 0x07
 532:	50 85       	ldd	r21, Z+8	; 0x08
 534:	45 56       	subi	r20, 0x65	; 101
 536:	54 4f       	sbci	r21, 0xF4	; 244
 538:	fd 01       	movw	r30, r26
 53a:	e2 0f       	add	r30, r18
 53c:	f3 1f       	adc	r31, r19
 53e:	81 81       	ldd	r24, Z+1	; 0x01
 540:	9a 01       	movw	r18, r20
 542:	68 e0       	ldi	r22, 0x08	; 8
 544:	86 02       	muls	r24, r22
 546:	20 0d       	add	r18, r0
 548:	31 1d       	adc	r19, r1
 54a:	11 24       	eor	r1, r1
 54c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 550:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
}
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <_ZN11PwGenerator14TimerInterruptEv>:

void PwGenerator::TimerInterrupt()
{
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	dc 01       	movw	r26, r24
	// Implements TIMER1_COMPA_vect

	// Clear Bit and select next channel
	if (channel >= 0) PORTC &= ~(1<<channel);
 560:	3c 91       	ld	r19, X
 562:	33 23       	and	r19, r19
 564:	5c f0       	brlt	.+22     	; 0x57c <_ZN11PwGenerator14TimerInterruptEv+0x22>
 566:	28 b1       	in	r18, 0x08	; 8
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <_ZN11PwGenerator14TimerInterruptEv+0x18>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	3a 95       	dec	r19
 574:	e2 f7       	brpl	.-8      	; 0x56e <_ZN11PwGenerator14TimerInterruptEv+0x14>
 576:	80 95       	com	r24
 578:	82 23       	and	r24, r18
 57a:	88 b9       	out	0x08, r24	; 8
    channel += 1;
 57c:	8c 91       	ld	r24, X
 57e:	8f 5f       	subi	r24, 0xFF	; 255
 580:	8c 93       	st	X, r24
    if (channel <= 5) {
 582:	86 30       	cpi	r24, 0x06	; 6
 584:	44 f5       	brge	.+80     	; 0x5d6 <_ZN11PwGenerator14TimerInterruptEv+0x7c>
        // Set Channel Pin
        PORTC |= (1<<channel);
 586:	48 b1       	in	r20, 0x08	; 8
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	b9 01       	movw	r22, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <_ZN11PwGenerator14TimerInterruptEv+0x3a>
 590:	66 0f       	add	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	8a 95       	dec	r24
 596:	e2 f7       	brpl	.-8      	; 0x590 <_ZN11PwGenerator14TimerInterruptEv+0x36>
 598:	cb 01       	movw	r24, r22
 59a:	84 2b       	or	r24, r20
 59c:	88 b9       	out	0x08, r24	; 8
        // Set the Timer
        OCR1A = CHANNELMIDWIDTH + PwAdjustValues[channel] + (PwValues[channel] * CHANNELSTEPWIDTH);
 59e:	8c 91       	ld	r24, X
 5a0:	08 2e       	mov	r0, r24
 5a2:	00 0c       	add	r0, r0
 5a4:	99 0b       	sbc	r25, r25
 5a6:	fc 01       	movw	r30, r24
 5a8:	ee 0f       	add	r30, r30
 5aa:	ff 1f       	adc	r31, r31
 5ac:	ea 0f       	add	r30, r26
 5ae:	fb 1f       	adc	r31, r27
 5b0:	27 81       	ldd	r18, Z+7	; 0x07
 5b2:	30 85       	ldd	r19, Z+8	; 0x08
 5b4:	25 56       	subi	r18, 0x65	; 101
 5b6:	34 4f       	sbci	r19, 0xF4	; 244
 5b8:	a8 0f       	add	r26, r24
 5ba:	b9 1f       	adc	r27, r25
 5bc:	11 96       	adiw	r26, 0x01	; 1
 5be:	8c 91       	ld	r24, X
 5c0:	a9 01       	movw	r20, r18
 5c2:	68 e0       	ldi	r22, 0x08	; 8
 5c4:	86 02       	muls	r24, r22
 5c6:	40 0d       	add	r20, r0
 5c8:	51 1d       	adc	r21, r1
 5ca:	11 24       	eor	r1, r1
 5cc:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 5d0:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 5d4:	27 c0       	rjmp	.+78     	; 0x624 <_ZN11PwGenerator14TimerInterruptEv+0xca>
    } else {
    	channel = -1; // Select -1 for the pause
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	8c 93       	st	X, r24
 5da:	fd 01       	movw	r30, r26
 5dc:	37 96       	adiw	r30, 0x07	; 7
 5de:	ed 01       	movw	r28, r26
 5e0:	21 96       	adiw	r28, 0x01	; 1
 5e2:	bd 01       	movw	r22, r26
 5e4:	6d 5e       	subi	r22, 0xED	; 237
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255

		// Calculate the rest to be executed for the whole period
    	int i = 0;
    	uint16_t pausetimervalue = OVERALLWIDTH;
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 ea       	ldi	r25, 0xA0	; 160
    	while (i<6) {
	    	pausetimervalue -= (CHANNELMIDWIDTH + PwAdjustValues[i] + PwValues[i] * CHANNELSTEPWIDTH);
 5ec:	21 91       	ld	r18, Z+
 5ee:	31 91       	ld	r19, Z+
 5f0:	49 91       	ld	r20, Y+
 5f2:	25 56       	subi	r18, 0x65	; 101
 5f4:	34 4f       	sbci	r19, 0xF4	; 244
 5f6:	58 e0       	ldi	r21, 0x08	; 8
 5f8:	45 02       	muls	r20, r21
 5fa:	20 0d       	add	r18, r0
 5fc:	31 1d       	adc	r19, r1
 5fe:	11 24       	eor	r1, r1
 600:	82 1b       	sub	r24, r18
 602:	93 0b       	sbc	r25, r19
    	channel = -1; // Select -1 for the pause

		// Calculate the rest to be executed for the whole period
    	int i = 0;
    	uint16_t pausetimervalue = OVERALLWIDTH;
    	while (i<6) {
 604:	e6 17       	cp	r30, r22
 606:	f7 07       	cpc	r31, r23
 608:	89 f7       	brne	.-30     	; 0x5ec <_ZN11PwGenerator14TimerInterruptEv+0x92>
	    	pausetimervalue -= (CHANNELMIDWIDTH + PwAdjustValues[i] + PwValues[i] * CHANNELSTEPWIDTH);
	    	i++;
    	}
		// Set Timer
    	OCR1A = pausetimervalue;
 60a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 60e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    	PwMainCyclesCount += 1;
 612:	53 96       	adiw	r26, 0x13	; 19
 614:	8d 91       	ld	r24, X+
 616:	9c 91       	ld	r25, X
 618:	54 97       	sbiw	r26, 0x14	; 20
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	54 96       	adiw	r26, 0x14	; 20
 61e:	9c 93       	st	X, r25
 620:	8e 93       	st	-X, r24
 622:	53 97       	sbiw	r26, 0x13	; 19
    }
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	08 95       	ret

0000062a <_ZN15SerialInterface10InitializeEv>:
#define UART_UBRR_CALC(BAUD_,FREQ_) ((FREQ_)/((BAUD_)*16L)-1)


    // Adapted for 382P on 7.12.2019 - inerting 0
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 62a:	28 e1       	ldi	r18, 0x18	; 24
 62c:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 630:	2e e0       	ldi	r18, 0x0E	; 14
 632:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>

	// Set Baudrate
    UBRR0H = (uint8_t)( UART_UBRR_CALC( UART_BAUD_RATE, F_CPU ) >> 8 );
 636:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t)UART_UBRR_CALC( UART_BAUD_RATE, F_CPU );
 63a:	29 e1       	ldi	r18, 0x19	; 25
 63c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

    inputPointerSendRingBuffer = 0;
 640:	fc 01       	movw	r30, r24
 642:	11 a2       	std	Z+33, r1	; 0x21
 644:	10 a2       	std	Z+32, r1	; 0x20
    outputPointerSendRingBuffer = 0;
 646:	13 a2       	std	Z+35, r1	; 0x23
 648:	12 a2       	std	Z+34, r1	; 0x22
    inputPointerReceiveRingBuffer = 0;
 64a:	ec 5b       	subi	r30, 0xBC	; 188
 64c:	ff 4f       	sbci	r31, 0xFF	; 255
 64e:	11 82       	std	Z+1, r1	; 0x01
 650:	10 82       	st	Z, r1
    outputPointerReceiveRingBuffer = 0;
 652:	32 96       	adiw	r30, 0x02	; 2
 654:	11 82       	std	Z+1, r1	; 0x01
 656:	10 82       	st	Z, r1
 658:	08 95       	ret

0000065a <_ZN15SerialInterface6CyclicEv>:
// This must be called in cyclic way - it sends and receives the characters

void SerialInterface::Cyclic()
{
	//if ( _SFR_BYTE(UCSRA) | (1<<UDRE) ) // would also be correct
	if ( UCSR0A & (1<<UDRE0) ) {// Check if sendbuffer is empty
 65a:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 65e:	25 ff       	sbrs	r18, 5
 660:	1b c0       	rjmp	.+54     	; 0x698 <_ZN15SerialInterface6CyclicEv+0x3e>
		if (outputPointerSendRingBuffer != inputPointerSendRingBuffer)
 662:	fc 01       	movw	r30, r24
 664:	22 a1       	ldd	r18, Z+34	; 0x22
 666:	33 a1       	ldd	r19, Z+35	; 0x23
 668:	40 a1       	ldd	r20, Z+32	; 0x20
 66a:	51 a1       	ldd	r21, Z+33	; 0x21
 66c:	24 17       	cp	r18, r20
 66e:	35 07       	cpc	r19, r21
 670:	99 f0       	breq	.+38     	; 0x698 <_ZN15SerialInterface6CyclicEv+0x3e>
		{
			UDR0 = sendRingBuffer[outputPointerSendRingBuffer];
 672:	e2 0f       	add	r30, r18
 674:	f3 1f       	adc	r31, r19
 676:	20 81       	ld	r18, Z
 678:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
			outputPointerSendRingBuffer += 1;
 67c:	fc 01       	movw	r30, r24
 67e:	22 a1       	ldd	r18, Z+34	; 0x22
 680:	33 a1       	ldd	r19, Z+35	; 0x23
 682:	2f 5f       	subi	r18, 0xFF	; 255
 684:	3f 4f       	sbci	r19, 0xFF	; 255
			if (outputPointerSendRingBuffer > (SERIAL_BUFFER_SIZE - 1)) outputPointerSendRingBuffer = 0;
 686:	20 32       	cpi	r18, 0x20	; 32
 688:	31 05       	cpc	r19, r1
 68a:	1c f4       	brge	.+6      	; 0x692 <_ZN15SerialInterface6CyclicEv+0x38>
	//if ( _SFR_BYTE(UCSRA) | (1<<UDRE) ) // would also be correct
	if ( UCSR0A & (1<<UDRE0) ) {// Check if sendbuffer is empty
		if (outputPointerSendRingBuffer != inputPointerSendRingBuffer)
		{
			UDR0 = sendRingBuffer[outputPointerSendRingBuffer];
			outputPointerSendRingBuffer += 1;
 68c:	33 a3       	std	Z+35, r19	; 0x23
 68e:	22 a3       	std	Z+34, r18	; 0x22
 690:	03 c0       	rjmp	.+6      	; 0x698 <_ZN15SerialInterface6CyclicEv+0x3e>
			if (outputPointerSendRingBuffer > (SERIAL_BUFFER_SIZE - 1)) outputPointerSendRingBuffer = 0;
 692:	fc 01       	movw	r30, r24
 694:	13 a2       	std	Z+35, r1	; 0x23
 696:	12 a2       	std	Z+34, r1	; 0x22
		}
	}

	// Check if something has to be received
	if ( UCSR0A & (1<<RXC0) ) {
 698:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 69c:	22 23       	and	r18, r18
 69e:	ac f5       	brge	.+106    	; 0x70a <_ZN15SerialInterface6CyclicEv+0xb0>
		// if next increase of inputPointer is same as output, then no read
		if ( !(
				((inputPointerReceiveRingBuffer + 1 ) > (SERIAL_BUFFER_SIZE - 1)) && (outputPointerReceiveRingBuffer == 0)
 6a0:	fc 01       	movw	r30, r24
 6a2:	ec 5b       	subi	r30, 0xBC	; 188
 6a4:	ff 4f       	sbci	r31, 0xFF	; 255
 6a6:	20 81       	ld	r18, Z
 6a8:	31 81       	ldd	r19, Z+1	; 0x01
 6aa:	a9 01       	movw	r20, r18
 6ac:	4f 5f       	subi	r20, 0xFF	; 255
 6ae:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	// Check if something has to be received
	if ( UCSR0A & (1<<RXC0) ) {
		// if next increase of inputPointer is same as output, then no read
		if ( !(
 6b0:	40 32       	cpi	r20, 0x20	; 32
 6b2:	51 05       	cpc	r21, r1
 6b4:	3c f0       	brlt	.+14     	; 0x6c4 <_ZN15SerialInterface6CyclicEv+0x6a>
				((inputPointerReceiveRingBuffer + 1 ) > (SERIAL_BUFFER_SIZE - 1)) && (outputPointerReceiveRingBuffer == 0)
 6b6:	32 96       	adiw	r30, 0x02	; 2
 6b8:	60 81       	ld	r22, Z
 6ba:	71 81       	ldd	r23, Z+1	; 0x01
			  )  ) {
 6bc:	61 15       	cp	r22, r1
 6be:	71 05       	cpc	r23, r1
 6c0:	09 f5       	brne	.+66     	; 0x704 <_ZN15SerialInterface6CyclicEv+0xaa>
 6c2:	08 95       	ret
			if ( !(
					(inputPointerReceiveRingBuffer + 1) == outputPointerReceiveRingBuffer
 6c4:	fc 01       	movw	r30, r24
 6c6:	ea 5b       	subi	r30, 0xBA	; 186
 6c8:	ff 4f       	sbci	r31, 0xFF	; 255
	if ( UCSR0A & (1<<RXC0) ) {
		// if next increase of inputPointer is same as output, then no read
		if ( !(
				((inputPointerReceiveRingBuffer + 1 ) > (SERIAL_BUFFER_SIZE - 1)) && (outputPointerReceiveRingBuffer == 0)
			  )  ) {
			if ( !(
 6ca:	60 81       	ld	r22, Z
 6cc:	71 81       	ldd	r23, Z+1	; 0x01
 6ce:	46 17       	cp	r20, r22
 6d0:	57 07       	cpc	r21, r23
 6d2:	d9 f0       	breq	.+54     	; 0x70a <_ZN15SerialInterface6CyclicEv+0xb0>
					(inputPointerReceiveRingBuffer + 1) == outputPointerReceiveRingBuffer
				  )  ) {
				// put char to ringbuffer and increase pointer
				receiveRingBuffer[inputPointerReceiveRingBuffer] = UDR0;
 6d4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 6d8:	fc 01       	movw	r30, r24
 6da:	e2 0f       	add	r30, r18
 6dc:	f3 1f       	adc	r31, r19
 6de:	64 a3       	std	Z+36, r22	; 0x24
				inputPointerReceiveRingBuffer += 1;
 6e0:	fc 01       	movw	r30, r24
 6e2:	ec 5b       	subi	r30, 0xBC	; 188
 6e4:	ff 4f       	sbci	r31, 0xFF	; 255
 6e6:	51 83       	std	Z+1, r21	; 0x01
 6e8:	40 83       	st	Z, r20
				if (inputPointerReceiveRingBuffer > (SERIAL_BUFFER_SIZE - 1)) inputPointerReceiveRingBuffer = 0;
			}
		}
	}
}
 6ea:	08 95       	ret
			  )  ) {
			if ( !(
					(inputPointerReceiveRingBuffer + 1) == outputPointerReceiveRingBuffer
				  )  ) {
				// put char to ringbuffer and increase pointer
				receiveRingBuffer[inputPointerReceiveRingBuffer] = UDR0;
 6ec:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 6f0:	fc 01       	movw	r30, r24
 6f2:	e2 0f       	add	r30, r18
 6f4:	f3 1f       	adc	r31, r19
 6f6:	44 a3       	std	Z+36, r20	; 0x24
				inputPointerReceiveRingBuffer += 1;
				if (inputPointerReceiveRingBuffer > (SERIAL_BUFFER_SIZE - 1)) inputPointerReceiveRingBuffer = 0;
 6f8:	fc 01       	movw	r30, r24
 6fa:	ec 5b       	subi	r30, 0xBC	; 188
 6fc:	ff 4f       	sbci	r31, 0xFF	; 255
 6fe:	11 82       	std	Z+1, r1	; 0x01
 700:	10 82       	st	Z, r1
 702:	08 95       	ret
	if ( UCSR0A & (1<<RXC0) ) {
		// if next increase of inputPointer is same as output, then no read
		if ( !(
				((inputPointerReceiveRingBuffer + 1 ) > (SERIAL_BUFFER_SIZE - 1)) && (outputPointerReceiveRingBuffer == 0)
			  )  ) {
			if ( !(
 704:	46 17       	cp	r20, r22
 706:	57 07       	cpc	r21, r23
 708:	89 f7       	brne	.-30     	; 0x6ec <_ZN15SerialInterface6CyclicEv+0x92>
 70a:	08 95       	ret

0000070c <_ZN15SerialInterface7GetCharEPc>:
//---------------------------------------------------------------------------------------
// Gets a character from the receivebuffer

bool SerialInterface::GetChar(char *receivedCharPtr)
{
	if (outputPointerReceiveRingBuffer != inputPointerReceiveRingBuffer)
 70c:	fc 01       	movw	r30, r24
 70e:	ea 5b       	subi	r30, 0xBA	; 186
 710:	ff 4f       	sbci	r31, 0xFF	; 255
 712:	20 81       	ld	r18, Z
 714:	31 81       	ldd	r19, Z+1	; 0x01
 716:	32 97       	sbiw	r30, 0x02	; 2
 718:	40 81       	ld	r20, Z
 71a:	51 81       	ldd	r21, Z+1	; 0x01
 71c:	24 17       	cp	r18, r20
 71e:	35 07       	cpc	r19, r21
 720:	d9 f0       	breq	.+54     	; 0x758 <_ZN15SerialInterface7GetCharEPc+0x4c>
	{
		*receivedCharPtr = receiveRingBuffer[outputPointerReceiveRingBuffer];
 722:	fc 01       	movw	r30, r24
 724:	e2 0f       	add	r30, r18
 726:	f3 1f       	adc	r31, r19
 728:	24 a1       	ldd	r18, Z+36	; 0x24
 72a:	fb 01       	movw	r30, r22
 72c:	20 83       	st	Z, r18
		outputPointerReceiveRingBuffer += 1;
 72e:	fc 01       	movw	r30, r24
 730:	ea 5b       	subi	r30, 0xBA	; 186
 732:	ff 4f       	sbci	r31, 0xFF	; 255
 734:	20 81       	ld	r18, Z
 736:	31 81       	ldd	r19, Z+1	; 0x01
 738:	2f 5f       	subi	r18, 0xFF	; 255
 73a:	3f 4f       	sbci	r19, 0xFF	; 255
		if (outputPointerReceiveRingBuffer > (SERIAL_BUFFER_SIZE - 1)) outputPointerReceiveRingBuffer = 0;
 73c:	20 32       	cpi	r18, 0x20	; 32
 73e:	31 05       	cpc	r19, r1
 740:	24 f4       	brge	.+8      	; 0x74a <_ZN15SerialInterface7GetCharEPc+0x3e>
bool SerialInterface::GetChar(char *receivedCharPtr)
{
	if (outputPointerReceiveRingBuffer != inputPointerReceiveRingBuffer)
	{
		*receivedCharPtr = receiveRingBuffer[outputPointerReceiveRingBuffer];
		outputPointerReceiveRingBuffer += 1;
 742:	31 83       	std	Z+1, r19	; 0x01
 744:	20 83       	st	Z, r18
		if (outputPointerReceiveRingBuffer > (SERIAL_BUFFER_SIZE - 1)) outputPointerReceiveRingBuffer = 0;
		return true;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret
{
	if (outputPointerReceiveRingBuffer != inputPointerReceiveRingBuffer)
	{
		*receivedCharPtr = receiveRingBuffer[outputPointerReceiveRingBuffer];
		outputPointerReceiveRingBuffer += 1;
		if (outputPointerReceiveRingBuffer > (SERIAL_BUFFER_SIZE - 1)) outputPointerReceiveRingBuffer = 0;
 74a:	fc 01       	movw	r30, r24
 74c:	ea 5b       	subi	r30, 0xBA	; 186
 74e:	ff 4f       	sbci	r31, 0xFF	; 255
 750:	11 82       	std	Z+1, r1	; 0x01
 752:	10 82       	st	Z, r1
		return true;
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	08 95       	ret
	}
	return false;
 758:	80 e0       	ldi	r24, 0x00	; 0
}
 75a:	08 95       	ret

0000075c <_ZN15SerialInterface8SendCharEc>:

//---------------------------------------------------------------------------------------
// Take Char to the Ringbuffer

bool SerialInterface::SendChar(char charToSend)
{
 75c:	fc 01       	movw	r30, r24
	// if next increase of inputPointer is same as output, then drop char
	if (((inputPointerSendRingBuffer + 1 ) > (SERIAL_BUFFER_SIZE - 1)) && (outputPointerSendRingBuffer == 0)) return false;
 75e:	80 a1       	ldd	r24, Z+32	; 0x20
 760:	91 a1       	ldd	r25, Z+33	; 0x21
 762:	9c 01       	movw	r18, r24
 764:	2f 5f       	subi	r18, 0xFF	; 255
 766:	3f 4f       	sbci	r19, 0xFF	; 255
 768:	20 32       	cpi	r18, 0x20	; 32
 76a:	31 05       	cpc	r19, r1
 76c:	34 f0       	brlt	.+12     	; 0x77a <_ZN15SerialInterface8SendCharEc+0x1e>
 76e:	42 a1       	ldd	r20, Z+34	; 0x22
 770:	53 a1       	ldd	r21, Z+35	; 0x23
 772:	41 15       	cp	r20, r1
 774:	51 05       	cpc	r21, r1
 776:	e1 f4       	brne	.+56     	; 0x7b0 <_ZN15SerialInterface8SendCharEc+0x54>
 778:	0d c0       	rjmp	.+26     	; 0x794 <_ZN15SerialInterface8SendCharEc+0x38>
	if ((inputPointerSendRingBuffer + 1) == outputPointerSendRingBuffer) return false;
 77a:	42 a1       	ldd	r20, Z+34	; 0x22
 77c:	53 a1       	ldd	r21, Z+35	; 0x23
 77e:	24 17       	cp	r18, r20
 780:	35 07       	cpc	r19, r21
 782:	51 f0       	breq	.+20     	; 0x798 <_ZN15SerialInterface8SendCharEc+0x3c>

	// put char to ringbuffer and increase pointer
	sendRingBuffer[inputPointerSendRingBuffer] = charToSend;
 784:	df 01       	movw	r26, r30
 786:	a8 0f       	add	r26, r24
 788:	b9 1f       	adc	r27, r25
 78a:	6c 93       	st	X, r22
	inputPointerSendRingBuffer += 1;
 78c:	31 a3       	std	Z+33, r19	; 0x21
 78e:	20 a3       	std	Z+32, r18	; 0x20
	if (inputPointerSendRingBuffer > (SERIAL_BUFFER_SIZE - 1)) inputPointerSendRingBuffer = 0;
	return true;
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	08 95       	ret
// Take Char to the Ringbuffer

bool SerialInterface::SendChar(char charToSend)
{
	// if next increase of inputPointer is same as output, then drop char
	if (((inputPointerSendRingBuffer + 1 ) > (SERIAL_BUFFER_SIZE - 1)) && (outputPointerSendRingBuffer == 0)) return false;
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	08 95       	ret
	if ((inputPointerSendRingBuffer + 1) == outputPointerSendRingBuffer) return false;
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	08 95       	ret
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	08 95       	ret

	// put char to ringbuffer and increase pointer
	sendRingBuffer[inputPointerSendRingBuffer] = charToSend;
 7a0:	df 01       	movw	r26, r30
 7a2:	a8 0f       	add	r26, r24
 7a4:	b9 1f       	adc	r27, r25
 7a6:	6c 93       	st	X, r22
	inputPointerSendRingBuffer += 1;
	if (inputPointerSendRingBuffer > (SERIAL_BUFFER_SIZE - 1)) inputPointerSendRingBuffer = 0;
 7a8:	11 a2       	std	Z+33, r1	; 0x21
 7aa:	10 a2       	std	Z+32, r1	; 0x20
	return true;
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	08 95       	ret

bool SerialInterface::SendChar(char charToSend)
{
	// if next increase of inputPointer is same as output, then drop char
	if (((inputPointerSendRingBuffer + 1 ) > (SERIAL_BUFFER_SIZE - 1)) && (outputPointerSendRingBuffer == 0)) return false;
	if ((inputPointerSendRingBuffer + 1) == outputPointerSendRingBuffer) return false;
 7b0:	24 17       	cp	r18, r20
 7b2:	35 07       	cpc	r19, r21
 7b4:	a9 f7       	brne	.-22     	; 0x7a0 <_ZN15SerialInterface8SendCharEc+0x44>
 7b6:	f2 cf       	rjmp	.-28     	; 0x79c <_ZN15SerialInterface8SendCharEc+0x40>

000007b8 <_ZN15SerialInterface10SendStringEPc>:

//---------------------------------------------------------------------------------------
// Sends a complete String

bool SerialInterface::SendString(char *sendString)
{
 7b8:	0f 93       	push	r16
 7ba:	1f 93       	push	r17
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	eb 01       	movw	r28, r22
	int i = 0;
	bool retval = true;

	while( (sendString[i] != 0) && retval) {
 7c2:	68 81       	ld	r22, Y
 7c4:	66 23       	and	r22, r22
 7c6:	61 f0       	breq	.+24     	; 0x7e0 <_ZN15SerialInterface10SendStringEPc+0x28>
 7c8:	8c 01       	movw	r16, r24
 7ca:	21 96       	adiw	r28, 0x01	; 1
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <_ZN15SerialInterface10SendStringEPc+0x1a>
 7ce:	88 23       	and	r24, r24
 7d0:	41 f0       	breq	.+16     	; 0x7e2 <_ZN15SerialInterface10SendStringEPc+0x2a>
		retval = SendChar(sendString[i++]);
 7d2:	c8 01       	movw	r24, r16
 7d4:	0e 94 ae 03 	call	0x75c	; 0x75c <_ZN15SerialInterface8SendCharEc>
bool SerialInterface::SendString(char *sendString)
{
	int i = 0;
	bool retval = true;

	while( (sendString[i] != 0) && retval) {
 7d8:	69 91       	ld	r22, Y+
 7da:	61 11       	cpse	r22, r1
 7dc:	f8 cf       	rjmp	.-16     	; 0x7ce <_ZN15SerialInterface10SendStringEPc+0x16>
 7de:	01 c0       	rjmp	.+2      	; 0x7e2 <_ZN15SerialInterface10SendStringEPc+0x2a>
// Sends a complete String

bool SerialInterface::SendString(char *sendString)
{
	int i = 0;
	bool retval = true;
 7e0:	81 e0       	ldi	r24, 0x01	; 1
	while( (sendString[i] != 0) && retval) {
		retval = SendChar(sendString[i++]);

	}
	return retval;
}
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	1f 91       	pop	r17
 7e8:	0f 91       	pop	r16
 7ea:	08 95       	ret

000007ec <_ZN11StickReader10InitializeEv>:
	ADMUX |= (1 << REFS0);
	ADMUX &= ~(1 << REFS1);
}

void StickReader::TimerInterrupt()
{
 7ec:	ea e7       	ldi	r30, 0x7A	; 122
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	87 60       	ori	r24, 0x07	; 7
 7f4:	80 83       	st	Z, r24
 7f6:	80 81       	ld	r24, Z
 7f8:	80 68       	ori	r24, 0x80	; 128
 7fa:	80 83       	st	Z, r24
 7fc:	ec e7       	ldi	r30, 0x7C	; 124
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	80 64       	ori	r24, 0x40	; 64
 804:	80 83       	st	Z, r24
 806:	80 81       	ld	r24, Z
 808:	8f 77       	andi	r24, 0x7F	; 127
 80a:	80 83       	st	Z, r24
 80c:	08 95       	ret

0000080e <_ZN11StickReader7ReadADCEv>:

}

void StickReader::ReadADC()
{
 80e:	dc 01       	movw	r26, r24
	//   so I should do alway pollng and switching the input chanel
	//   but auto triggering must be selected
			
	// Different input chanel can be selected but will first be activated when running conversion is ready
	// Select ADC7
	ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0)); // all to zero
 810:	ec e7       	ldi	r30, 0x7C	; 124
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	80 7f       	andi	r24, 0xF0	; 240
 818:	80 83       	st	Z, r24
	ADMUX |= (0 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0);
 81a:	80 81       	ld	r24, Z
 81c:	87 60       	ori	r24, 0x07	; 7
 81e:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); // start conversion
 820:	ea e7       	ldi	r30, 0x7A	; 122
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	80 64       	ori	r24, 0x40	; 64
 828:	80 83       	st	Z, r24
			
	// wait for ADSC to get to zero to show that conversion is ready
	int i=0;
	while ( (ADCSRA & _BV(ADSC)) ) {
 82a:	90 81       	ld	r25, Z
 82c:	96 fd       	sbrc	r25, 6
 82e:	fd cf       	rjmp	.-6      	; 0x82a <_ZN11StickReader7ReadADCEv+0x1c>
		i += 1;
	}
			
	// Read Low and then High
	uint16_t AdcValueADC7;
	AdcValueADC7 = ADC;
 830:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 834:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

	// Different input chanel can be selected but will first be activated when running conversion is ready
	// Select ADC6
	ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0)); // all to zero
 838:	ec e7       	ldi	r30, 0x7C	; 124
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	80 7f       	andi	r24, 0xF0	; 240
 840:	80 83       	st	Z, r24
	ADMUX |= (0 << MUX3) | (1 << MUX2) | (1 << MUX1) | (0 << MUX0);
 842:	80 81       	ld	r24, Z
 844:	86 60       	ori	r24, 0x06	; 6
 846:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC); // start conversion
 848:	ea e7       	ldi	r30, 0x7A	; 122
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	80 64       	ori	r24, 0x40	; 64
 850:	80 83       	st	Z, r24
			
	// wait for ADSC to get to zero to show that conversion is ready
	while ( (ADCSRA & _BV(ADSC)) ) {
 852:	90 81       	ld	r25, Z
 854:	96 fd       	sbrc	r25, 6
 856:	fd cf       	rjmp	.-6      	; 0x852 <_ZN11StickReader7ReadADCEv+0x44>
		i += 1;
	}
			
	// Read Low and then High
	uint16_t AdcValueADC6;
	AdcValueADC6 = ADC;
 858:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 85c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	//sprintf (strptr, "ADC: %u  %u\n\r", AdcValueADC7, AdcValueADC6);
	//serialInterface.SendString(strptr);

	int16_t PwValueCalc16;
	// int8_t PwValueCalc8;
	PwValueCalc16 = (AdcValueADC6 - 487);
 860:	27 5e       	subi	r18, 0xE7	; 231
 862:	31 40       	sbci	r19, 0x01	; 1
 864:	c9 01       	movw	r24, r18
	// PwValueCalc8 = PwValueCalc16;
	StickX = PwValueCalc16;
	if (PwValueCalc16 > 127) StickX = 127;
 866:	20 38       	cpi	r18, 0x80	; 128
 868:	31 05       	cpc	r19, r1
 86a:	14 f4       	brge	.+4      	; 0x870 <_ZN11StickReader7ReadADCEv+0x62>

	int16_t PwValueCalc16;
	// int8_t PwValueCalc8;
	PwValueCalc16 = (AdcValueADC6 - 487);
	// PwValueCalc8 = PwValueCalc16;
	StickX = PwValueCalc16;
 86c:	2c 93       	st	X, r18
 86e:	02 c0       	rjmp	.+4      	; 0x874 <_ZN11StickReader7ReadADCEv+0x66>
	if (PwValueCalc16 > 127) StickX = 127;
 870:	2f e7       	ldi	r18, 0x7F	; 127
 872:	2c 93       	st	X, r18
	if (PwValueCalc16 < -127) StickX = -127;
 874:	81 38       	cpi	r24, 0x81	; 129
 876:	9f 4f       	sbci	r25, 0xFF	; 255
 878:	14 f4       	brge	.+4      	; 0x87e <_ZN11StickReader7ReadADCEv+0x70>
 87a:	81 e8       	ldi	r24, 0x81	; 129
 87c:	8c 93       	st	X, r24
			
	PwValueCalc16 = - (AdcValueADC7 - 497);
 87e:	21 ef       	ldi	r18, 0xF1	; 241
 880:	31 e0       	ldi	r19, 0x01	; 1
 882:	24 1b       	sub	r18, r20
 884:	35 0b       	sbc	r19, r21
 886:	c9 01       	movw	r24, r18
	// PwValueCalc8 = PwValueCalc16;
	StickY = PwValueCalc16;
	if (PwValueCalc16 > 127) StickY = 127;
 888:	20 38       	cpi	r18, 0x80	; 128
 88a:	31 05       	cpc	r19, r1
 88c:	24 f4       	brge	.+8      	; 0x896 <_ZN11StickReader7ReadADCEv+0x88>
	if (PwValueCalc16 > 127) StickX = 127;
	if (PwValueCalc16 < -127) StickX = -127;
			
	PwValueCalc16 = - (AdcValueADC7 - 497);
	// PwValueCalc8 = PwValueCalc16;
	StickY = PwValueCalc16;
 88e:	11 96       	adiw	r26, 0x01	; 1
 890:	2c 93       	st	X, r18
 892:	11 97       	sbiw	r26, 0x01	; 1
 894:	04 c0       	rjmp	.+8      	; 0x89e <_ZN11StickReader7ReadADCEv+0x90>
	if (PwValueCalc16 > 127) StickY = 127;
 896:	2f e7       	ldi	r18, 0x7F	; 127
 898:	11 96       	adiw	r26, 0x01	; 1
 89a:	2c 93       	st	X, r18
 89c:	11 97       	sbiw	r26, 0x01	; 1
	if (PwValueCalc16 < -127) StickY = -127;
 89e:	81 38       	cpi	r24, 0x81	; 129
 8a0:	9f 4f       	sbci	r25, 0xFF	; 255
 8a2:	1c f4       	brge	.+6      	; 0x8aa <_ZN11StickReader7ReadADCEv+0x9c>
 8a4:	81 e8       	ldi	r24, 0x81	; 129
 8a6:	11 96       	adiw	r26, 0x01	; 1
 8a8:	8c 93       	st	X, r24
 8aa:	08 95       	ret

000008ac <sprintf>:
 8ac:	ae e0       	ldi	r26, 0x0E	; 14
 8ae:	b0 e0       	ldi	r27, 0x00	; 0
 8b0:	ec e5       	ldi	r30, 0x5C	; 92
 8b2:	f4 e0       	ldi	r31, 0x04	; 4
 8b4:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__prologue_saves__+0x1c>
 8b8:	0d 89       	ldd	r16, Y+21	; 0x15
 8ba:	1e 89       	ldd	r17, Y+22	; 0x16
 8bc:	86 e0       	ldi	r24, 0x06	; 6
 8be:	8c 83       	std	Y+4, r24	; 0x04
 8c0:	1a 83       	std	Y+2, r17	; 0x02
 8c2:	09 83       	std	Y+1, r16	; 0x01
 8c4:	8f ef       	ldi	r24, 0xFF	; 255
 8c6:	9f e7       	ldi	r25, 0x7F	; 127
 8c8:	9e 83       	std	Y+6, r25	; 0x06
 8ca:	8d 83       	std	Y+5, r24	; 0x05
 8cc:	ae 01       	movw	r20, r28
 8ce:	47 5e       	subi	r20, 0xE7	; 231
 8d0:	5f 4f       	sbci	r21, 0xFF	; 255
 8d2:	6f 89       	ldd	r22, Y+23	; 0x17
 8d4:	78 8d       	ldd	r23, Y+24	; 0x18
 8d6:	ce 01       	movw	r24, r28
 8d8:	01 96       	adiw	r24, 0x01	; 1
 8da:	0e 94 78 04 	call	0x8f0	; 0x8f0 <vfprintf>
 8de:	ef 81       	ldd	r30, Y+7	; 0x07
 8e0:	f8 85       	ldd	r31, Y+8	; 0x08
 8e2:	e0 0f       	add	r30, r16
 8e4:	f1 1f       	adc	r31, r17
 8e6:	10 82       	st	Z, r1
 8e8:	2e 96       	adiw	r28, 0x0e	; 14
 8ea:	e4 e0       	ldi	r30, 0x04	; 4
 8ec:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__epilogue_restores__+0x1c>

000008f0 <vfprintf>:
 8f0:	ab e0       	ldi	r26, 0x0B	; 11
 8f2:	b0 e0       	ldi	r27, 0x00	; 0
 8f4:	ee e7       	ldi	r30, 0x7E	; 126
 8f6:	f4 e0       	ldi	r31, 0x04	; 4
 8f8:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__prologue_saves__>
 8fc:	6c 01       	movw	r12, r24
 8fe:	7b 01       	movw	r14, r22
 900:	8a 01       	movw	r16, r20
 902:	fc 01       	movw	r30, r24
 904:	17 82       	std	Z+7, r1	; 0x07
 906:	16 82       	std	Z+6, r1	; 0x06
 908:	83 81       	ldd	r24, Z+3	; 0x03
 90a:	81 ff       	sbrs	r24, 1
 90c:	cc c1       	rjmp	.+920    	; 0xca6 <__stack+0x3a7>
 90e:	ce 01       	movw	r24, r28
 910:	01 96       	adiw	r24, 0x01	; 1
 912:	3c 01       	movw	r6, r24
 914:	f6 01       	movw	r30, r12
 916:	93 81       	ldd	r25, Z+3	; 0x03
 918:	f7 01       	movw	r30, r14
 91a:	93 fd       	sbrc	r25, 3
 91c:	85 91       	lpm	r24, Z+
 91e:	93 ff       	sbrs	r25, 3
 920:	81 91       	ld	r24, Z+
 922:	7f 01       	movw	r14, r30
 924:	88 23       	and	r24, r24
 926:	09 f4       	brne	.+2      	; 0x92a <__stack+0x2b>
 928:	ba c1       	rjmp	.+884    	; 0xc9e <__stack+0x39f>
 92a:	85 32       	cpi	r24, 0x25	; 37
 92c:	39 f4       	brne	.+14     	; 0x93c <__stack+0x3d>
 92e:	93 fd       	sbrc	r25, 3
 930:	85 91       	lpm	r24, Z+
 932:	93 ff       	sbrs	r25, 3
 934:	81 91       	ld	r24, Z+
 936:	7f 01       	movw	r14, r30
 938:	85 32       	cpi	r24, 0x25	; 37
 93a:	29 f4       	brne	.+10     	; 0x946 <__stack+0x47>
 93c:	b6 01       	movw	r22, r12
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 944:	e7 cf       	rjmp	.-50     	; 0x914 <__stack+0x15>
 946:	91 2c       	mov	r9, r1
 948:	21 2c       	mov	r2, r1
 94a:	31 2c       	mov	r3, r1
 94c:	ff e1       	ldi	r31, 0x1F	; 31
 94e:	f3 15       	cp	r31, r3
 950:	d8 f0       	brcs	.+54     	; 0x988 <__stack+0x89>
 952:	8b 32       	cpi	r24, 0x2B	; 43
 954:	79 f0       	breq	.+30     	; 0x974 <__stack+0x75>
 956:	38 f4       	brcc	.+14     	; 0x966 <__stack+0x67>
 958:	80 32       	cpi	r24, 0x20	; 32
 95a:	79 f0       	breq	.+30     	; 0x97a <__stack+0x7b>
 95c:	83 32       	cpi	r24, 0x23	; 35
 95e:	a1 f4       	brne	.+40     	; 0x988 <__stack+0x89>
 960:	23 2d       	mov	r18, r3
 962:	20 61       	ori	r18, 0x10	; 16
 964:	1d c0       	rjmp	.+58     	; 0x9a0 <__stack+0xa1>
 966:	8d 32       	cpi	r24, 0x2D	; 45
 968:	61 f0       	breq	.+24     	; 0x982 <__stack+0x83>
 96a:	80 33       	cpi	r24, 0x30	; 48
 96c:	69 f4       	brne	.+26     	; 0x988 <__stack+0x89>
 96e:	23 2d       	mov	r18, r3
 970:	21 60       	ori	r18, 0x01	; 1
 972:	16 c0       	rjmp	.+44     	; 0x9a0 <__stack+0xa1>
 974:	83 2d       	mov	r24, r3
 976:	82 60       	ori	r24, 0x02	; 2
 978:	38 2e       	mov	r3, r24
 97a:	e3 2d       	mov	r30, r3
 97c:	e4 60       	ori	r30, 0x04	; 4
 97e:	3e 2e       	mov	r3, r30
 980:	2a c0       	rjmp	.+84     	; 0x9d6 <__stack+0xd7>
 982:	f3 2d       	mov	r31, r3
 984:	f8 60       	ori	r31, 0x08	; 8
 986:	1d c0       	rjmp	.+58     	; 0x9c2 <__stack+0xc3>
 988:	37 fc       	sbrc	r3, 7
 98a:	2d c0       	rjmp	.+90     	; 0x9e6 <__stack+0xe7>
 98c:	20 ed       	ldi	r18, 0xD0	; 208
 98e:	28 0f       	add	r18, r24
 990:	2a 30       	cpi	r18, 0x0A	; 10
 992:	40 f0       	brcs	.+16     	; 0x9a4 <__stack+0xa5>
 994:	8e 32       	cpi	r24, 0x2E	; 46
 996:	b9 f4       	brne	.+46     	; 0x9c6 <__stack+0xc7>
 998:	36 fc       	sbrc	r3, 6
 99a:	81 c1       	rjmp	.+770    	; 0xc9e <__stack+0x39f>
 99c:	23 2d       	mov	r18, r3
 99e:	20 64       	ori	r18, 0x40	; 64
 9a0:	32 2e       	mov	r3, r18
 9a2:	19 c0       	rjmp	.+50     	; 0x9d6 <__stack+0xd7>
 9a4:	36 fe       	sbrs	r3, 6
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <__stack+0xb5>
 9a8:	8a e0       	ldi	r24, 0x0A	; 10
 9aa:	98 9e       	mul	r9, r24
 9ac:	20 0d       	add	r18, r0
 9ae:	11 24       	eor	r1, r1
 9b0:	92 2e       	mov	r9, r18
 9b2:	11 c0       	rjmp	.+34     	; 0x9d6 <__stack+0xd7>
 9b4:	ea e0       	ldi	r30, 0x0A	; 10
 9b6:	2e 9e       	mul	r2, r30
 9b8:	20 0d       	add	r18, r0
 9ba:	11 24       	eor	r1, r1
 9bc:	22 2e       	mov	r2, r18
 9be:	f3 2d       	mov	r31, r3
 9c0:	f0 62       	ori	r31, 0x20	; 32
 9c2:	3f 2e       	mov	r3, r31
 9c4:	08 c0       	rjmp	.+16     	; 0x9d6 <__stack+0xd7>
 9c6:	8c 36       	cpi	r24, 0x6C	; 108
 9c8:	21 f4       	brne	.+8      	; 0x9d2 <__stack+0xd3>
 9ca:	83 2d       	mov	r24, r3
 9cc:	80 68       	ori	r24, 0x80	; 128
 9ce:	38 2e       	mov	r3, r24
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0xd7>
 9d2:	88 36       	cpi	r24, 0x68	; 104
 9d4:	41 f4       	brne	.+16     	; 0x9e6 <__stack+0xe7>
 9d6:	f7 01       	movw	r30, r14
 9d8:	93 fd       	sbrc	r25, 3
 9da:	85 91       	lpm	r24, Z+
 9dc:	93 ff       	sbrs	r25, 3
 9de:	81 91       	ld	r24, Z+
 9e0:	7f 01       	movw	r14, r30
 9e2:	81 11       	cpse	r24, r1
 9e4:	b3 cf       	rjmp	.-154    	; 0x94c <__stack+0x4d>
 9e6:	98 2f       	mov	r25, r24
 9e8:	9f 7d       	andi	r25, 0xDF	; 223
 9ea:	95 54       	subi	r25, 0x45	; 69
 9ec:	93 30       	cpi	r25, 0x03	; 3
 9ee:	28 f4       	brcc	.+10     	; 0x9fa <__stack+0xfb>
 9f0:	0c 5f       	subi	r16, 0xFC	; 252
 9f2:	1f 4f       	sbci	r17, 0xFF	; 255
 9f4:	9f e3       	ldi	r25, 0x3F	; 63
 9f6:	99 83       	std	Y+1, r25	; 0x01
 9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__stack+0x115>
 9fa:	83 36       	cpi	r24, 0x63	; 99
 9fc:	31 f0       	breq	.+12     	; 0xa0a <__stack+0x10b>
 9fe:	83 37       	cpi	r24, 0x73	; 115
 a00:	71 f0       	breq	.+28     	; 0xa1e <__stack+0x11f>
 a02:	83 35       	cpi	r24, 0x53	; 83
 a04:	09 f0       	breq	.+2      	; 0xa08 <__stack+0x109>
 a06:	59 c0       	rjmp	.+178    	; 0xaba <__stack+0x1bb>
 a08:	21 c0       	rjmp	.+66     	; 0xa4c <__stack+0x14d>
 a0a:	f8 01       	movw	r30, r16
 a0c:	80 81       	ld	r24, Z
 a0e:	89 83       	std	Y+1, r24	; 0x01
 a10:	0e 5f       	subi	r16, 0xFE	; 254
 a12:	1f 4f       	sbci	r17, 0xFF	; 255
 a14:	88 24       	eor	r8, r8
 a16:	83 94       	inc	r8
 a18:	91 2c       	mov	r9, r1
 a1a:	53 01       	movw	r10, r6
 a1c:	13 c0       	rjmp	.+38     	; 0xa44 <__stack+0x145>
 a1e:	28 01       	movw	r4, r16
 a20:	f2 e0       	ldi	r31, 0x02	; 2
 a22:	4f 0e       	add	r4, r31
 a24:	51 1c       	adc	r5, r1
 a26:	f8 01       	movw	r30, r16
 a28:	a0 80       	ld	r10, Z
 a2a:	b1 80       	ldd	r11, Z+1	; 0x01
 a2c:	36 fe       	sbrs	r3, 6
 a2e:	03 c0       	rjmp	.+6      	; 0xa36 <__stack+0x137>
 a30:	69 2d       	mov	r22, r9
 a32:	70 e0       	ldi	r23, 0x00	; 0
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <__stack+0x13b>
 a36:	6f ef       	ldi	r22, 0xFF	; 255
 a38:	7f ef       	ldi	r23, 0xFF	; 255
 a3a:	c5 01       	movw	r24, r10
 a3c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <strnlen>
 a40:	4c 01       	movw	r8, r24
 a42:	82 01       	movw	r16, r4
 a44:	f3 2d       	mov	r31, r3
 a46:	ff 77       	andi	r31, 0x7F	; 127
 a48:	3f 2e       	mov	r3, r31
 a4a:	16 c0       	rjmp	.+44     	; 0xa78 <__stack+0x179>
 a4c:	28 01       	movw	r4, r16
 a4e:	22 e0       	ldi	r18, 0x02	; 2
 a50:	42 0e       	add	r4, r18
 a52:	51 1c       	adc	r5, r1
 a54:	f8 01       	movw	r30, r16
 a56:	a0 80       	ld	r10, Z
 a58:	b1 80       	ldd	r11, Z+1	; 0x01
 a5a:	36 fe       	sbrs	r3, 6
 a5c:	03 c0       	rjmp	.+6      	; 0xa64 <__stack+0x165>
 a5e:	69 2d       	mov	r22, r9
 a60:	70 e0       	ldi	r23, 0x00	; 0
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <__stack+0x169>
 a64:	6f ef       	ldi	r22, 0xFF	; 255
 a66:	7f ef       	ldi	r23, 0xFF	; 255
 a68:	c5 01       	movw	r24, r10
 a6a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <strnlen_P>
 a6e:	4c 01       	movw	r8, r24
 a70:	f3 2d       	mov	r31, r3
 a72:	f0 68       	ori	r31, 0x80	; 128
 a74:	3f 2e       	mov	r3, r31
 a76:	82 01       	movw	r16, r4
 a78:	33 fc       	sbrc	r3, 3
 a7a:	1b c0       	rjmp	.+54     	; 0xab2 <__stack+0x1b3>
 a7c:	82 2d       	mov	r24, r2
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	88 16       	cp	r8, r24
 a82:	99 06       	cpc	r9, r25
 a84:	b0 f4       	brcc	.+44     	; 0xab2 <__stack+0x1b3>
 a86:	b6 01       	movw	r22, r12
 a88:	80 e2       	ldi	r24, 0x20	; 32
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 a90:	2a 94       	dec	r2
 a92:	f4 cf       	rjmp	.-24     	; 0xa7c <__stack+0x17d>
 a94:	f5 01       	movw	r30, r10
 a96:	37 fc       	sbrc	r3, 7
 a98:	85 91       	lpm	r24, Z+
 a9a:	37 fe       	sbrs	r3, 7
 a9c:	81 91       	ld	r24, Z+
 a9e:	5f 01       	movw	r10, r30
 aa0:	b6 01       	movw	r22, r12
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 aa8:	21 10       	cpse	r2, r1
 aaa:	2a 94       	dec	r2
 aac:	21 e0       	ldi	r18, 0x01	; 1
 aae:	82 1a       	sub	r8, r18
 ab0:	91 08       	sbc	r9, r1
 ab2:	81 14       	cp	r8, r1
 ab4:	91 04       	cpc	r9, r1
 ab6:	71 f7       	brne	.-36     	; 0xa94 <__stack+0x195>
 ab8:	e8 c0       	rjmp	.+464    	; 0xc8a <__stack+0x38b>
 aba:	84 36       	cpi	r24, 0x64	; 100
 abc:	11 f0       	breq	.+4      	; 0xac2 <__stack+0x1c3>
 abe:	89 36       	cpi	r24, 0x69	; 105
 ac0:	41 f5       	brne	.+80     	; 0xb12 <__stack+0x213>
 ac2:	f8 01       	movw	r30, r16
 ac4:	37 fe       	sbrs	r3, 7
 ac6:	07 c0       	rjmp	.+14     	; 0xad6 <__stack+0x1d7>
 ac8:	60 81       	ld	r22, Z
 aca:	71 81       	ldd	r23, Z+1	; 0x01
 acc:	82 81       	ldd	r24, Z+2	; 0x02
 ace:	93 81       	ldd	r25, Z+3	; 0x03
 ad0:	0c 5f       	subi	r16, 0xFC	; 252
 ad2:	1f 4f       	sbci	r17, 0xFF	; 255
 ad4:	08 c0       	rjmp	.+16     	; 0xae6 <__stack+0x1e7>
 ad6:	60 81       	ld	r22, Z
 ad8:	71 81       	ldd	r23, Z+1	; 0x01
 ada:	07 2e       	mov	r0, r23
 adc:	00 0c       	add	r0, r0
 ade:	88 0b       	sbc	r24, r24
 ae0:	99 0b       	sbc	r25, r25
 ae2:	0e 5f       	subi	r16, 0xFE	; 254
 ae4:	1f 4f       	sbci	r17, 0xFF	; 255
 ae6:	f3 2d       	mov	r31, r3
 ae8:	ff 76       	andi	r31, 0x6F	; 111
 aea:	3f 2e       	mov	r3, r31
 aec:	97 ff       	sbrs	r25, 7
 aee:	09 c0       	rjmp	.+18     	; 0xb02 <__stack+0x203>
 af0:	90 95       	com	r25
 af2:	80 95       	com	r24
 af4:	70 95       	com	r23
 af6:	61 95       	neg	r22
 af8:	7f 4f       	sbci	r23, 0xFF	; 255
 afa:	8f 4f       	sbci	r24, 0xFF	; 255
 afc:	9f 4f       	sbci	r25, 0xFF	; 255
 afe:	f0 68       	ori	r31, 0x80	; 128
 b00:	3f 2e       	mov	r3, r31
 b02:	2a e0       	ldi	r18, 0x0A	; 10
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	a3 01       	movw	r20, r6
 b08:	0e 94 ab 06 	call	0xd56	; 0xd56 <__ultoa_invert>
 b0c:	88 2e       	mov	r8, r24
 b0e:	86 18       	sub	r8, r6
 b10:	45 c0       	rjmp	.+138    	; 0xb9c <__stack+0x29d>
 b12:	85 37       	cpi	r24, 0x75	; 117
 b14:	31 f4       	brne	.+12     	; 0xb22 <__stack+0x223>
 b16:	23 2d       	mov	r18, r3
 b18:	2f 7e       	andi	r18, 0xEF	; 239
 b1a:	b2 2e       	mov	r11, r18
 b1c:	2a e0       	ldi	r18, 0x0A	; 10
 b1e:	30 e0       	ldi	r19, 0x00	; 0
 b20:	25 c0       	rjmp	.+74     	; 0xb6c <__stack+0x26d>
 b22:	93 2d       	mov	r25, r3
 b24:	99 7f       	andi	r25, 0xF9	; 249
 b26:	b9 2e       	mov	r11, r25
 b28:	8f 36       	cpi	r24, 0x6F	; 111
 b2a:	c1 f0       	breq	.+48     	; 0xb5c <__stack+0x25d>
 b2c:	18 f4       	brcc	.+6      	; 0xb34 <__stack+0x235>
 b2e:	88 35       	cpi	r24, 0x58	; 88
 b30:	79 f0       	breq	.+30     	; 0xb50 <__stack+0x251>
 b32:	b5 c0       	rjmp	.+362    	; 0xc9e <__stack+0x39f>
 b34:	80 37       	cpi	r24, 0x70	; 112
 b36:	19 f0       	breq	.+6      	; 0xb3e <__stack+0x23f>
 b38:	88 37       	cpi	r24, 0x78	; 120
 b3a:	21 f0       	breq	.+8      	; 0xb44 <__stack+0x245>
 b3c:	b0 c0       	rjmp	.+352    	; 0xc9e <__stack+0x39f>
 b3e:	e9 2f       	mov	r30, r25
 b40:	e0 61       	ori	r30, 0x10	; 16
 b42:	be 2e       	mov	r11, r30
 b44:	b4 fe       	sbrs	r11, 4
 b46:	0d c0       	rjmp	.+26     	; 0xb62 <__stack+0x263>
 b48:	fb 2d       	mov	r31, r11
 b4a:	f4 60       	ori	r31, 0x04	; 4
 b4c:	bf 2e       	mov	r11, r31
 b4e:	09 c0       	rjmp	.+18     	; 0xb62 <__stack+0x263>
 b50:	34 fe       	sbrs	r3, 4
 b52:	0a c0       	rjmp	.+20     	; 0xb68 <__stack+0x269>
 b54:	29 2f       	mov	r18, r25
 b56:	26 60       	ori	r18, 0x06	; 6
 b58:	b2 2e       	mov	r11, r18
 b5a:	06 c0       	rjmp	.+12     	; 0xb68 <__stack+0x269>
 b5c:	28 e0       	ldi	r18, 0x08	; 8
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	05 c0       	rjmp	.+10     	; 0xb6c <__stack+0x26d>
 b62:	20 e1       	ldi	r18, 0x10	; 16
 b64:	30 e0       	ldi	r19, 0x00	; 0
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <__stack+0x26d>
 b68:	20 e1       	ldi	r18, 0x10	; 16
 b6a:	32 e0       	ldi	r19, 0x02	; 2
 b6c:	f8 01       	movw	r30, r16
 b6e:	b7 fe       	sbrs	r11, 7
 b70:	07 c0       	rjmp	.+14     	; 0xb80 <__stack+0x281>
 b72:	60 81       	ld	r22, Z
 b74:	71 81       	ldd	r23, Z+1	; 0x01
 b76:	82 81       	ldd	r24, Z+2	; 0x02
 b78:	93 81       	ldd	r25, Z+3	; 0x03
 b7a:	0c 5f       	subi	r16, 0xFC	; 252
 b7c:	1f 4f       	sbci	r17, 0xFF	; 255
 b7e:	06 c0       	rjmp	.+12     	; 0xb8c <__stack+0x28d>
 b80:	60 81       	ld	r22, Z
 b82:	71 81       	ldd	r23, Z+1	; 0x01
 b84:	80 e0       	ldi	r24, 0x00	; 0
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	0e 5f       	subi	r16, 0xFE	; 254
 b8a:	1f 4f       	sbci	r17, 0xFF	; 255
 b8c:	a3 01       	movw	r20, r6
 b8e:	0e 94 ab 06 	call	0xd56	; 0xd56 <__ultoa_invert>
 b92:	88 2e       	mov	r8, r24
 b94:	86 18       	sub	r8, r6
 b96:	fb 2d       	mov	r31, r11
 b98:	ff 77       	andi	r31, 0x7F	; 127
 b9a:	3f 2e       	mov	r3, r31
 b9c:	36 fe       	sbrs	r3, 6
 b9e:	0d c0       	rjmp	.+26     	; 0xbba <__stack+0x2bb>
 ba0:	23 2d       	mov	r18, r3
 ba2:	2e 7f       	andi	r18, 0xFE	; 254
 ba4:	a2 2e       	mov	r10, r18
 ba6:	89 14       	cp	r8, r9
 ba8:	58 f4       	brcc	.+22     	; 0xbc0 <__stack+0x2c1>
 baa:	34 fe       	sbrs	r3, 4
 bac:	0b c0       	rjmp	.+22     	; 0xbc4 <__stack+0x2c5>
 bae:	32 fc       	sbrc	r3, 2
 bb0:	09 c0       	rjmp	.+18     	; 0xbc4 <__stack+0x2c5>
 bb2:	83 2d       	mov	r24, r3
 bb4:	8e 7e       	andi	r24, 0xEE	; 238
 bb6:	a8 2e       	mov	r10, r24
 bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <__stack+0x2c5>
 bba:	b8 2c       	mov	r11, r8
 bbc:	a3 2c       	mov	r10, r3
 bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <__stack+0x2c7>
 bc0:	b8 2c       	mov	r11, r8
 bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <__stack+0x2c7>
 bc4:	b9 2c       	mov	r11, r9
 bc6:	a4 fe       	sbrs	r10, 4
 bc8:	0f c0       	rjmp	.+30     	; 0xbe8 <__stack+0x2e9>
 bca:	fe 01       	movw	r30, r28
 bcc:	e8 0d       	add	r30, r8
 bce:	f1 1d       	adc	r31, r1
 bd0:	80 81       	ld	r24, Z
 bd2:	80 33       	cpi	r24, 0x30	; 48
 bd4:	21 f4       	brne	.+8      	; 0xbde <__stack+0x2df>
 bd6:	9a 2d       	mov	r25, r10
 bd8:	99 7e       	andi	r25, 0xE9	; 233
 bda:	a9 2e       	mov	r10, r25
 bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <__stack+0x2f1>
 bde:	a2 fe       	sbrs	r10, 2
 be0:	06 c0       	rjmp	.+12     	; 0xbee <__stack+0x2ef>
 be2:	b3 94       	inc	r11
 be4:	b3 94       	inc	r11
 be6:	04 c0       	rjmp	.+8      	; 0xbf0 <__stack+0x2f1>
 be8:	8a 2d       	mov	r24, r10
 bea:	86 78       	andi	r24, 0x86	; 134
 bec:	09 f0       	breq	.+2      	; 0xbf0 <__stack+0x2f1>
 bee:	b3 94       	inc	r11
 bf0:	a3 fc       	sbrc	r10, 3
 bf2:	11 c0       	rjmp	.+34     	; 0xc16 <__stack+0x317>
 bf4:	a0 fe       	sbrs	r10, 0
 bf6:	06 c0       	rjmp	.+12     	; 0xc04 <__stack+0x305>
 bf8:	b2 14       	cp	r11, r2
 bfa:	88 f4       	brcc	.+34     	; 0xc1e <__stack+0x31f>
 bfc:	28 0c       	add	r2, r8
 bfe:	92 2c       	mov	r9, r2
 c00:	9b 18       	sub	r9, r11
 c02:	0e c0       	rjmp	.+28     	; 0xc20 <__stack+0x321>
 c04:	b2 14       	cp	r11, r2
 c06:	60 f4       	brcc	.+24     	; 0xc20 <__stack+0x321>
 c08:	b6 01       	movw	r22, r12
 c0a:	80 e2       	ldi	r24, 0x20	; 32
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c12:	b3 94       	inc	r11
 c14:	f7 cf       	rjmp	.-18     	; 0xc04 <__stack+0x305>
 c16:	b2 14       	cp	r11, r2
 c18:	18 f4       	brcc	.+6      	; 0xc20 <__stack+0x321>
 c1a:	2b 18       	sub	r2, r11
 c1c:	02 c0       	rjmp	.+4      	; 0xc22 <__stack+0x323>
 c1e:	98 2c       	mov	r9, r8
 c20:	21 2c       	mov	r2, r1
 c22:	a4 fe       	sbrs	r10, 4
 c24:	10 c0       	rjmp	.+32     	; 0xc46 <__stack+0x347>
 c26:	b6 01       	movw	r22, r12
 c28:	80 e3       	ldi	r24, 0x30	; 48
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c30:	a2 fe       	sbrs	r10, 2
 c32:	17 c0       	rjmp	.+46     	; 0xc62 <__stack+0x363>
 c34:	a1 fc       	sbrc	r10, 1
 c36:	03 c0       	rjmp	.+6      	; 0xc3e <__stack+0x33f>
 c38:	88 e7       	ldi	r24, 0x78	; 120
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <__stack+0x343>
 c3e:	88 e5       	ldi	r24, 0x58	; 88
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	b6 01       	movw	r22, r12
 c44:	0c c0       	rjmp	.+24     	; 0xc5e <__stack+0x35f>
 c46:	8a 2d       	mov	r24, r10
 c48:	86 78       	andi	r24, 0x86	; 134
 c4a:	59 f0       	breq	.+22     	; 0xc62 <__stack+0x363>
 c4c:	a1 fe       	sbrs	r10, 1
 c4e:	02 c0       	rjmp	.+4      	; 0xc54 <__stack+0x355>
 c50:	8b e2       	ldi	r24, 0x2B	; 43
 c52:	01 c0       	rjmp	.+2      	; 0xc56 <__stack+0x357>
 c54:	80 e2       	ldi	r24, 0x20	; 32
 c56:	a7 fc       	sbrc	r10, 7
 c58:	8d e2       	ldi	r24, 0x2D	; 45
 c5a:	b6 01       	movw	r22, r12
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c62:	89 14       	cp	r8, r9
 c64:	38 f4       	brcc	.+14     	; 0xc74 <__stack+0x375>
 c66:	b6 01       	movw	r22, r12
 c68:	80 e3       	ldi	r24, 0x30	; 48
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c70:	9a 94       	dec	r9
 c72:	f7 cf       	rjmp	.-18     	; 0xc62 <__stack+0x363>
 c74:	8a 94       	dec	r8
 c76:	f3 01       	movw	r30, r6
 c78:	e8 0d       	add	r30, r8
 c7a:	f1 1d       	adc	r31, r1
 c7c:	80 81       	ld	r24, Z
 c7e:	b6 01       	movw	r22, r12
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c86:	81 10       	cpse	r8, r1
 c88:	f5 cf       	rjmp	.-22     	; 0xc74 <__stack+0x375>
 c8a:	22 20       	and	r2, r2
 c8c:	09 f4       	brne	.+2      	; 0xc90 <__stack+0x391>
 c8e:	42 ce       	rjmp	.-892    	; 0x914 <__stack+0x15>
 c90:	b6 01       	movw	r22, r12
 c92:	80 e2       	ldi	r24, 0x20	; 32
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c9a:	2a 94       	dec	r2
 c9c:	f6 cf       	rjmp	.-20     	; 0xc8a <__stack+0x38b>
 c9e:	f6 01       	movw	r30, r12
 ca0:	86 81       	ldd	r24, Z+6	; 0x06
 ca2:	97 81       	ldd	r25, Z+7	; 0x07
 ca4:	02 c0       	rjmp	.+4      	; 0xcaa <__stack+0x3ab>
 ca6:	8f ef       	ldi	r24, 0xFF	; 255
 ca8:	9f ef       	ldi	r25, 0xFF	; 255
 caa:	2b 96       	adiw	r28, 0x0b	; 11
 cac:	e2 e1       	ldi	r30, 0x12	; 18
 cae:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__epilogue_restores__>

00000cb2 <strnlen_P>:
 cb2:	fc 01       	movw	r30, r24
 cb4:	05 90       	lpm	r0, Z+
 cb6:	61 50       	subi	r22, 0x01	; 1
 cb8:	70 40       	sbci	r23, 0x00	; 0
 cba:	01 10       	cpse	r0, r1
 cbc:	d8 f7       	brcc	.-10     	; 0xcb4 <strnlen_P+0x2>
 cbe:	80 95       	com	r24
 cc0:	90 95       	com	r25
 cc2:	8e 0f       	add	r24, r30
 cc4:	9f 1f       	adc	r25, r31
 cc6:	08 95       	ret

00000cc8 <strnlen>:
 cc8:	fc 01       	movw	r30, r24
 cca:	61 50       	subi	r22, 0x01	; 1
 ccc:	70 40       	sbci	r23, 0x00	; 0
 cce:	01 90       	ld	r0, Z+
 cd0:	01 10       	cpse	r0, r1
 cd2:	d8 f7       	brcc	.-10     	; 0xcca <strnlen+0x2>
 cd4:	80 95       	com	r24
 cd6:	90 95       	com	r25
 cd8:	8e 0f       	add	r24, r30
 cda:	9f 1f       	adc	r25, r31
 cdc:	08 95       	ret

00000cde <fputc>:
 cde:	0f 93       	push	r16
 ce0:	1f 93       	push	r17
 ce2:	cf 93       	push	r28
 ce4:	df 93       	push	r29
 ce6:	fb 01       	movw	r30, r22
 ce8:	23 81       	ldd	r18, Z+3	; 0x03
 cea:	21 fd       	sbrc	r18, 1
 cec:	03 c0       	rjmp	.+6      	; 0xcf4 <fputc+0x16>
 cee:	8f ef       	ldi	r24, 0xFF	; 255
 cf0:	9f ef       	ldi	r25, 0xFF	; 255
 cf2:	2c c0       	rjmp	.+88     	; 0xd4c <fputc+0x6e>
 cf4:	22 ff       	sbrs	r18, 2
 cf6:	16 c0       	rjmp	.+44     	; 0xd24 <fputc+0x46>
 cf8:	46 81       	ldd	r20, Z+6	; 0x06
 cfa:	57 81       	ldd	r21, Z+7	; 0x07
 cfc:	24 81       	ldd	r18, Z+4	; 0x04
 cfe:	35 81       	ldd	r19, Z+5	; 0x05
 d00:	42 17       	cp	r20, r18
 d02:	53 07       	cpc	r21, r19
 d04:	44 f4       	brge	.+16     	; 0xd16 <fputc+0x38>
 d06:	a0 81       	ld	r26, Z
 d08:	b1 81       	ldd	r27, Z+1	; 0x01
 d0a:	9d 01       	movw	r18, r26
 d0c:	2f 5f       	subi	r18, 0xFF	; 255
 d0e:	3f 4f       	sbci	r19, 0xFF	; 255
 d10:	31 83       	std	Z+1, r19	; 0x01
 d12:	20 83       	st	Z, r18
 d14:	8c 93       	st	X, r24
 d16:	26 81       	ldd	r18, Z+6	; 0x06
 d18:	37 81       	ldd	r19, Z+7	; 0x07
 d1a:	2f 5f       	subi	r18, 0xFF	; 255
 d1c:	3f 4f       	sbci	r19, 0xFF	; 255
 d1e:	37 83       	std	Z+7, r19	; 0x07
 d20:	26 83       	std	Z+6, r18	; 0x06
 d22:	14 c0       	rjmp	.+40     	; 0xd4c <fputc+0x6e>
 d24:	8b 01       	movw	r16, r22
 d26:	ec 01       	movw	r28, r24
 d28:	fb 01       	movw	r30, r22
 d2a:	00 84       	ldd	r0, Z+8	; 0x08
 d2c:	f1 85       	ldd	r31, Z+9	; 0x09
 d2e:	e0 2d       	mov	r30, r0
 d30:	09 95       	icall
 d32:	89 2b       	or	r24, r25
 d34:	e1 f6       	brne	.-72     	; 0xcee <fputc+0x10>
 d36:	d8 01       	movw	r26, r16
 d38:	16 96       	adiw	r26, 0x06	; 6
 d3a:	8d 91       	ld	r24, X+
 d3c:	9c 91       	ld	r25, X
 d3e:	17 97       	sbiw	r26, 0x07	; 7
 d40:	01 96       	adiw	r24, 0x01	; 1
 d42:	17 96       	adiw	r26, 0x07	; 7
 d44:	9c 93       	st	X, r25
 d46:	8e 93       	st	-X, r24
 d48:	16 97       	sbiw	r26, 0x06	; 6
 d4a:	ce 01       	movw	r24, r28
 d4c:	df 91       	pop	r29
 d4e:	cf 91       	pop	r28
 d50:	1f 91       	pop	r17
 d52:	0f 91       	pop	r16
 d54:	08 95       	ret

00000d56 <__ultoa_invert>:
 d56:	fa 01       	movw	r30, r20
 d58:	aa 27       	eor	r26, r26
 d5a:	28 30       	cpi	r18, 0x08	; 8
 d5c:	51 f1       	breq	.+84     	; 0xdb2 <__ultoa_invert+0x5c>
 d5e:	20 31       	cpi	r18, 0x10	; 16
 d60:	81 f1       	breq	.+96     	; 0xdc2 <__ultoa_invert+0x6c>
 d62:	e8 94       	clt
 d64:	6f 93       	push	r22
 d66:	6e 7f       	andi	r22, 0xFE	; 254
 d68:	6e 5f       	subi	r22, 0xFE	; 254
 d6a:	7f 4f       	sbci	r23, 0xFF	; 255
 d6c:	8f 4f       	sbci	r24, 0xFF	; 255
 d6e:	9f 4f       	sbci	r25, 0xFF	; 255
 d70:	af 4f       	sbci	r26, 0xFF	; 255
 d72:	b1 e0       	ldi	r27, 0x01	; 1
 d74:	3e d0       	rcall	.+124    	; 0xdf2 <__ultoa_invert+0x9c>
 d76:	b4 e0       	ldi	r27, 0x04	; 4
 d78:	3c d0       	rcall	.+120    	; 0xdf2 <__ultoa_invert+0x9c>
 d7a:	67 0f       	add	r22, r23
 d7c:	78 1f       	adc	r23, r24
 d7e:	89 1f       	adc	r24, r25
 d80:	9a 1f       	adc	r25, r26
 d82:	a1 1d       	adc	r26, r1
 d84:	68 0f       	add	r22, r24
 d86:	79 1f       	adc	r23, r25
 d88:	8a 1f       	adc	r24, r26
 d8a:	91 1d       	adc	r25, r1
 d8c:	a1 1d       	adc	r26, r1
 d8e:	6a 0f       	add	r22, r26
 d90:	71 1d       	adc	r23, r1
 d92:	81 1d       	adc	r24, r1
 d94:	91 1d       	adc	r25, r1
 d96:	a1 1d       	adc	r26, r1
 d98:	20 d0       	rcall	.+64     	; 0xdda <__ultoa_invert+0x84>
 d9a:	09 f4       	brne	.+2      	; 0xd9e <__ultoa_invert+0x48>
 d9c:	68 94       	set
 d9e:	3f 91       	pop	r19
 da0:	2a e0       	ldi	r18, 0x0A	; 10
 da2:	26 9f       	mul	r18, r22
 da4:	11 24       	eor	r1, r1
 da6:	30 19       	sub	r19, r0
 da8:	30 5d       	subi	r19, 0xD0	; 208
 daa:	31 93       	st	Z+, r19
 dac:	de f6       	brtc	.-74     	; 0xd64 <__ultoa_invert+0xe>
 dae:	cf 01       	movw	r24, r30
 db0:	08 95       	ret
 db2:	46 2f       	mov	r20, r22
 db4:	47 70       	andi	r20, 0x07	; 7
 db6:	40 5d       	subi	r20, 0xD0	; 208
 db8:	41 93       	st	Z+, r20
 dba:	b3 e0       	ldi	r27, 0x03	; 3
 dbc:	0f d0       	rcall	.+30     	; 0xddc <__ultoa_invert+0x86>
 dbe:	c9 f7       	brne	.-14     	; 0xdb2 <__ultoa_invert+0x5c>
 dc0:	f6 cf       	rjmp	.-20     	; 0xdae <__ultoa_invert+0x58>
 dc2:	46 2f       	mov	r20, r22
 dc4:	4f 70       	andi	r20, 0x0F	; 15
 dc6:	40 5d       	subi	r20, 0xD0	; 208
 dc8:	4a 33       	cpi	r20, 0x3A	; 58
 dca:	18 f0       	brcs	.+6      	; 0xdd2 <__ultoa_invert+0x7c>
 dcc:	49 5d       	subi	r20, 0xD9	; 217
 dce:	31 fd       	sbrc	r19, 1
 dd0:	40 52       	subi	r20, 0x20	; 32
 dd2:	41 93       	st	Z+, r20
 dd4:	02 d0       	rcall	.+4      	; 0xdda <__ultoa_invert+0x84>
 dd6:	a9 f7       	brne	.-22     	; 0xdc2 <__ultoa_invert+0x6c>
 dd8:	ea cf       	rjmp	.-44     	; 0xdae <__ultoa_invert+0x58>
 dda:	b4 e0       	ldi	r27, 0x04	; 4
 ddc:	a6 95       	lsr	r26
 dde:	97 95       	ror	r25
 de0:	87 95       	ror	r24
 de2:	77 95       	ror	r23
 de4:	67 95       	ror	r22
 de6:	ba 95       	dec	r27
 de8:	c9 f7       	brne	.-14     	; 0xddc <__ultoa_invert+0x86>
 dea:	00 97       	sbiw	r24, 0x00	; 0
 dec:	61 05       	cpc	r22, r1
 dee:	71 05       	cpc	r23, r1
 df0:	08 95       	ret
 df2:	9b 01       	movw	r18, r22
 df4:	ac 01       	movw	r20, r24
 df6:	0a 2e       	mov	r0, r26
 df8:	06 94       	lsr	r0
 dfa:	57 95       	ror	r21
 dfc:	47 95       	ror	r20
 dfe:	37 95       	ror	r19
 e00:	27 95       	ror	r18
 e02:	ba 95       	dec	r27
 e04:	c9 f7       	brne	.-14     	; 0xdf8 <__ultoa_invert+0xa2>
 e06:	62 0f       	add	r22, r18
 e08:	73 1f       	adc	r23, r19
 e0a:	84 1f       	adc	r24, r20
 e0c:	95 1f       	adc	r25, r21
 e0e:	a0 1d       	adc	r26, r0
 e10:	08 95       	ret

00000e12 <__prologue_saves__>:
 e12:	2f 92       	push	r2
 e14:	3f 92       	push	r3
 e16:	4f 92       	push	r4
 e18:	5f 92       	push	r5
 e1a:	6f 92       	push	r6
 e1c:	7f 92       	push	r7
 e1e:	8f 92       	push	r8
 e20:	9f 92       	push	r9
 e22:	af 92       	push	r10
 e24:	bf 92       	push	r11
 e26:	cf 92       	push	r12
 e28:	df 92       	push	r13
 e2a:	ef 92       	push	r14
 e2c:	ff 92       	push	r15
 e2e:	0f 93       	push	r16
 e30:	1f 93       	push	r17
 e32:	cf 93       	push	r28
 e34:	df 93       	push	r29
 e36:	cd b7       	in	r28, 0x3d	; 61
 e38:	de b7       	in	r29, 0x3e	; 62
 e3a:	ca 1b       	sub	r28, r26
 e3c:	db 0b       	sbc	r29, r27
 e3e:	0f b6       	in	r0, 0x3f	; 63
 e40:	f8 94       	cli
 e42:	de bf       	out	0x3e, r29	; 62
 e44:	0f be       	out	0x3f, r0	; 63
 e46:	cd bf       	out	0x3d, r28	; 61
 e48:	09 94       	ijmp

00000e4a <__epilogue_restores__>:
 e4a:	2a 88       	ldd	r2, Y+18	; 0x12
 e4c:	39 88       	ldd	r3, Y+17	; 0x11
 e4e:	48 88       	ldd	r4, Y+16	; 0x10
 e50:	5f 84       	ldd	r5, Y+15	; 0x0f
 e52:	6e 84       	ldd	r6, Y+14	; 0x0e
 e54:	7d 84       	ldd	r7, Y+13	; 0x0d
 e56:	8c 84       	ldd	r8, Y+12	; 0x0c
 e58:	9b 84       	ldd	r9, Y+11	; 0x0b
 e5a:	aa 84       	ldd	r10, Y+10	; 0x0a
 e5c:	b9 84       	ldd	r11, Y+9	; 0x09
 e5e:	c8 84       	ldd	r12, Y+8	; 0x08
 e60:	df 80       	ldd	r13, Y+7	; 0x07
 e62:	ee 80       	ldd	r14, Y+6	; 0x06
 e64:	fd 80       	ldd	r15, Y+5	; 0x05
 e66:	0c 81       	ldd	r16, Y+4	; 0x04
 e68:	1b 81       	ldd	r17, Y+3	; 0x03
 e6a:	aa 81       	ldd	r26, Y+2	; 0x02
 e6c:	b9 81       	ldd	r27, Y+1	; 0x01
 e6e:	ce 0f       	add	r28, r30
 e70:	d1 1d       	adc	r29, r1
 e72:	0f b6       	in	r0, 0x3f	; 63
 e74:	f8 94       	cli
 e76:	de bf       	out	0x3e, r29	; 62
 e78:	0f be       	out	0x3f, r0	; 63
 e7a:	cd bf       	out	0x3d, r28	; 61
 e7c:	ed 01       	movw	r28, r26
 e7e:	08 95       	ret

00000e80 <_exit>:
 e80:	f8 94       	cli

00000e82 <__stop_program>:
 e82:	ff cf       	rjmp	.-2      	; 0xe82 <__stop_program>
